<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2012-03-18 15:16" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>itora web</title>
	<link>http://www.itora.net/blog</link>
	<description></description>
	<pubDate>Sun, 18 Mar 2012 15:16:31 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.itora.net/blog</wp:base_site_url>
	<wp:base_blog_url>http://www.itora.net/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>lastexxit@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[davide]]></wp:author_first_name><wp:author_last_name><![CDATA[prati]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>46</wp:term_id><wp:category_nicename>allday</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[allday]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>cakephp</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[cakephp]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>php</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[php]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>37</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>ruby-on-rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby on rails]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>960grid</wp:tag_slug><wp:tag_name><![CDATA[960grid]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>acl</wp:tag_slug><wp:tag_name><![CDATA[ACL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>admin</wp:tag_slug><wp:tag_name><![CDATA[admin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>aggiornare-debian-alla-nuova-testing-release</wp:tag_slug><wp:tag_name><![CDATA[aggiornare debian alla nuova testing release]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>auth</wp:tag_slug><wp:tag_name><![CDATA[auth]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>authentication</wp:tag_slug><wp:tag_name><![CDATA[authentication]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>bash</wp:tag_slug><wp:tag_name><![CDATA[bash]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>bedita</wp:tag_slug><wp:tag_name><![CDATA[bedita]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>behaviors</wp:tag_slug><wp:tag_name><![CDATA[behaviors]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>best-practice</wp:tag_slug><wp:tag_name><![CDATA[best practice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>cakephp</wp:tag_slug><wp:tag_name><![CDATA[cakephp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>cakephp2-0</wp:tag_slug><wp:tag_name><![CDATA[cakephp2.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>check-the-owner</wp:tag_slug><wp:tag_name><![CDATA[check the owner]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>clearance</wp:tag_slug><wp:tag_name><![CDATA[clearance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>component</wp:tag_slug><wp:tag_name><![CDATA[component]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>datasource</wp:tag_slug><wp:tag_name><![CDATA[datasource]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>debian</wp:tag_slug><wp:tag_name><![CDATA[debian]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>devise</wp:tag_slug><wp:tag_name><![CDATA[devise]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>facebook</wp:tag_slug><wp:tag_name><![CDATA[facebook]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>fork</wp:tag_slug><wp:tag_name><![CDATA[fork]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>friendly-url</wp:tag_slug><wp:tag_name><![CDATA[Friendly URL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>git-branch</wp:tag_slug><wp:tag_name><![CDATA[git branch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>github</wp:tag_slug><wp:tag_name><![CDATA[github]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>images-upload</wp:tag_slug><wp:tag_name><![CDATA[images upload]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>improve-my-day</wp:tag_slug><wp:tag_name><![CDATA[improve my day]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>lxde</wp:tag_slug><wp:tag_name><![CDATA[lxde]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>migrazione</wp:tag_slug><wp:tag_name><![CDATA[migrazione]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>model</wp:tag_slug><wp:tag_name><![CDATA[model]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>mp3</wp:tag_slug><wp:tag_name><![CDATA[mp3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>myday</wp:tag_slug><wp:tag_name><![CDATA[myday]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>netbeans</wp:tag_slug><wp:tag_name><![CDATA[netbeans]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>newsletter</wp:tag_slug><wp:tag_name><![CDATA[newsletter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>nokogiri</wp:tag_slug><wp:tag_name><![CDATA[nokogiri]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>parsing</wp:tag_slug><wp:tag_name><![CDATA[parsing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>paypal</wp:tag_slug><wp:tag_name><![CDATA[paypal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>phpunit</wp:tag_slug><wp:tag_name><![CDATA[phpUnit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[plugin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>posizionamento-sui-motori</wp:tag_slug><wp:tag_name><![CDATA[posizionamento sui motori]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>preg</wp:tag_slug><wp:tag_name><![CDATA[preg]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>remove-comments</wp:tag_slug><wp:tag_name><![CDATA[remove comments]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>routes</wp:tag_slug><wp:tag_name><![CDATA[routes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>ruby-on-rails</wp:tag_slug><wp:tag_name><![CDATA[ruby on rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>rvm</wp:tag_slug><wp:tag_name><![CDATA[RVM]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>script</wp:tag_slug><wp:tag_name><![CDATA[script]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>security-component</wp:tag_slug><wp:tag_name><![CDATA[security component]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>seo</wp:tag_slug><wp:tag_name><![CDATA[SEO]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>sluggable</wp:tag_slug><wp:tag_name><![CDATA[sluggable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>spam</wp:tag_slug><wp:tag_name><![CDATA[spam]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>ssl</wp:tag_slug><wp:tag_name><![CDATA[ssl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>static-pages</wp:tag_slug><wp:tag_name><![CDATA[static pages]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>submodule</wp:tag_slug><wp:tag_name><![CDATA[submodule]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>swiftmailer</wp:tag_slug><wp:tag_name><![CDATA[swiftmailer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>themes</wp:tag_slug><wp:tag_name><![CDATA[themes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>tree</wp:tag_slug><wp:tag_name><![CDATA[tree]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>tutorial</wp:tag_slug><wp:tag_name><![CDATA[tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>twitter-anywhere</wp:tag_slug><wp:tag_name><![CDATA[twitter @anywhere]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>wordpress-template</wp:tag_slug><wp:tag_name><![CDATA[wordpress template]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>youtube</wp:tag_slug><wp:tag_name><![CDATA[youtube]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>59</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>main</wp:term_slug><wp:term_name><![CDATA[main]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>Web Development</title>
		<link>http://www.itora.net/blog/?page_id=2</link>
		<pubDate>Wed, 17 Mar 2010 12:46:39 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="../wp-content/themes/lightword/images/web_applications.jpg" alt="posizionamento sui motori" align="left" />Crediamo che un sito web debba andare <strong>oltre</strong> la semplice vetrina espositiva dei propri prodotti o servizi.
Deve permettere all'<strong>utente</strong> di raggiungere velocemente quello che cerca, deve permettere all'<strong>offerente</strong> di presentare in maniera elegante e funzionale il proprio servizio o prodotto.

Tutto quello che non ha niente a che vedere con questo concetto, è per entrambe le parti una <strong>perdita di tempo</strong>.
Per questo progettiamo strutture solide dai percorsi di navigazione chiari, in maniera elegante e adatta alle vostre esigenze, e a quelle dei vostri futuri clienti.

Progettiamo siti web <strong>autoaggiornabili</strong>, che vi permettono di inserire in autonomia i vostri prodotti, o i vostri nuovi eventi.
Realizziamo sistemi facili per gestire la vostra <strong>newsletter</strong>.
Progettiamo il percorso più semplice per portare il cliente dalla visione della vostra offerta al <strong>form di contatto</strong> o acquisto, progettando landing pages apposite.

avete altre esigenze? <a href="http://itora.net/contact">contattateci.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-03-17 12:46:39</wp:post_date>
		<wp:post_date_gmt>2010-03-17 12:46:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>web_applications</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[single-page-template.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Posizionamento su google</title>
		<link>http://www.itora.net/blog/?page_id=6</link>
		<pubDate>Wed, 17 Mar 2010 12:56:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="../wp-content/themes/lightword/images/posizionamento_sui_motori.jpg" alt="posizionamento sui motori" align="right" />

Cosa serve avere un sito web se nessuno può trovarlo?
Quali <strong>parole</strong> potrebbe digitare su Google un cliente alla ricerca di quello che voi offrite?
Essere rintracciabili su google è il primo passo necessario per raggiungere i vostri clienti.

Ma <strong>non è sufficiente</strong>.
Una volta che un utente ha trovato il vostro sito, potrebbe non trovarvi <strong>esattamente</strong> quello che cerca, o potrebbe non vederlo perchè mischiato ad altri articoli che non lo interessano.
Oppure ha trovato quello che cerca ma non capisce <strong>dove</strong> può ordinare l'articolo o richiedere informazioni su di esso, quasi sicuramente ha fretta.
Potrebbe pensare che sia una <strong>perdita di tempo</strong> e lasciare il vostro sito

Cerchiamo le parole chiave che vi portano il maggior numero di <strong>contatti</strong>.
Realizziamo <strong>landing pages</strong> apposite e monitoriamo costantemente il loro funzionamento.
Vi indichiamo quali sono le parti del vostro sito dove l'utente <strong>abbandona la navigazione</strong>, e vi suggeriamo come cambiarle.
Vi forniamo un <strong>report</strong> a cadenza personalizzata sull'andamento del vostro sito sui motori di ricerca.

Realizziamo <strong>campagne</strong> di annunci tematiche con <strong>google adwords</strong>. Creiamo gruppi di annunci distinti per ognuno dei prodotti, dei brand o dei tipi di servizi che il sito offre.
Questo, legato ad una corretta indicizzazione sui motori di ricerca, puo' aumentare <strong>sensibilmente</strong> il numero dei vostri contatti.

Se volete aumentare la vostra visibilità su google, <a href="../contact">contattateci</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2010-03-17 12:56:19</wp:post_date>
		<wp:post_date_gmt>2010-03-17 12:56:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>posizionamento-sui-motori</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[single-page-template.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Facebook applications</title>
		<link>http://www.itora.net/blog/?page_id=8</link>
		<pubDate>Wed, 17 Mar 2010 12:57:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?page_id=8</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="aligncenter" src="../wp-content/themes/lightword/images/facebook_applications.jpg" alt="facebook applications" align="right" />Facebook ha un bacino di utenti enorme, difficile da ignorare.
Inserire la propria pubblicità in facebook significa sfruttare un network consolidato per la <strong>diffusione virale</strong> del vostro messaggio.

Come si fa?
Progettando applicazioni che permettono di interfacciarsi con questa popolare piattaforma.

Ci occupiamo della realizzazione di <strong>facebook applications</strong> scritte  tramite le <a href="http://wiki.developers.facebook.com/index.php/User:Client_Libraries">api pubbliche </a>di facebook in php o ruby. Dall'ideazione, alla scelta delle possibili interazioni con l'utente;  dal più semplice pulsante alla più complessa animazione in Flash.
Nel caso foste interessati ad un preventivo per una facebook application, <a href="../contact/">contattateci</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2010-03-17 12:57:44</wp:post_date>
		<wp:post_date_gmt>2010-03-17 12:57:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>facebook-applications</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[single-page-template.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Traduzione siti</title>
		<link>http://www.itora.net/blog/?page_id=10</link>
		<pubDate>Wed, 17 Mar 2010 12:58:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/traduzione-siti-web</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="../wp-content/themes/lightword/images/traduzione_siti.jpg" alt="traduzione siti" align="center" />

Se siete intenzionati ad allargare il vostro bacino di utenti al di fuori dell'Italia, e volete una traduzione professionale, fatta da un <strong>madrelingua</strong>, rivolgetevi a noi. Trattiamo la traduzione di un sito web dall'italiano al<strong> francese</strong>, dall'italiano al <strong>tedesco</strong> e dall'italiano all'<strong>inglese</strong>.

Google Translate non basta? Il mio inglese non è sufficiente? Perchè il mio sito dovrebbe essere tradotto da un madrelingua?
Perchè non basta tradurre correttamente, va mantenuta la <strong>scorrevolezza</strong> e il <strong>significato</strong> del testo.
Anche se Google Translate ha fatto notevoli progressi e il vostro inglese è ottimo, entrambi non potranno mai esprimersi come un madrelingua. Molte forme dell'italiano non si possono tradurre in un altra lingua, o il loro corrispettivo e' completamente diverso dalla traduzione letterale. Gli errori grammaticali o di forma potrebbero dare una <strong>brutta immagine </strong>di voi al vostro cliente estero.
Se non volete che accada, <a href="../contact/">contattateci</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-03-17 12:58:28</wp:post_date>
		<wp:post_date_gmt>2010-03-17 12:58:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>traduzione-siti-web</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[single-page-template.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog</title>
		<link>http://www.itora.net/blog/?page_id=53</link>
		<pubDate>Thu, 18 Mar 2010 18:27:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog-2/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2010-03-18 18:27:20</wp:post_date>
		<wp:post_date_gmt>2010-03-18 18:27:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-2</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Implementare velocemente una Newsletter in CakePHP</title>
		<link>http://www.itora.net/blog/2010/03/20/implementare-velocemente-una-newsletter-in-cakephp/</link>
		<pubDate>Sat, 20 Mar 2010 09:39:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[Link utili per costruire una newsletter in cakephp.
Utilizziamo un plugin già fatto, scaricarlo da qui
<a href="http://github.com/innovativepm/cakephp-newsletter-plugin">http://github.com/innovativepm/cakephp-newsletter-plugin</a>

aggiungere questo behaviour in app/models/behaviour/
<a href="http://bakery.cakephp.org/articles/view/add-delete-habtm-behavior">http://bakery.cakephp.org/articles/view/add-delete-habtm-behavior</a>

Scaricare swift <a href="http://swiftmailer.org/download">http://swiftmailer.org/download</a> ed installarlo seguendo questo tutorial
<a href="http://bakery.cakephp.org/articles/view/updated-swiftmailer-4-xx-component-with-attachments-and-plugins">http://bakery.cakephp.org/articles/view/updated-swiftmailer-4-xx-component-with-attachments-and-plugins</a>

Assicurarsi che nell'appController ci sia un metodo SendMail, ovviamente con il component swiftMailer incluso.
Nel plugin scaricato, sono presenti dei file di configurazione, modificarli a seconda delle vostre esigenze
<a href="http://github.com/fabiokr/cakephp-newsletter-plugin">http://github.com/fabiokr/cakephp-newsletter-plugin</a>

aggiungere la chiamata a jquery nella cartella del plugin newsletter
in mail/admin_send.ctp
[php]link("jquery.min.js"); [/php]

modificare i link che nel nostro percorso di navigazione richiamano parti relative al plugin, es "www.miosito.com/newsletter".
<a href="http://github.com/fabiokr/cakephp-newsletter-plugin">http://book.cakephp.org/view/868/Plugin-routing</a>

Importante!
Il plugin richiede che nel vostro app controller ci sia un metodo sendEmail. Se usate questa funzione per l'invio di mal non legate alla newsletter, potrebbe non servirvi il template della newsletter.
Quindi nel metodo dovete specifcare il vostro template (linea 10).
[php]class AppController extends Controller{
	var $components = array('Auth','SwiftMailer');

	function sendEmail($subject, $viewSend=null, $to=null, $from = null, $fromName = null) {
		$this->SwiftMailer->smtpHost = 'localhost';
		//$this->SwiftMailer->sendAs = 'html';
		if($to == null) {
			$to = Configure::read('Newsletter.from_email');
		}
		if($viewSend == null) {
			$view = Configure::read('Newsletter.default_view');
			$this->set('message', 'My message');
		}else{
			$view = 'newsletter';
			$this->set('message', $viewSend);
		}
		$this->SwiftMailer->from         = $from != null ? $from : Configure::read('Newsletter.from_email');
		$this->SwiftMailer->fromName     = $fromName != null ? $fromName : Configure::read('Newsletter.from');
		$this->SwiftMailer->to           = $to;
		$method           = 'smtp';

		try {
			if(!$this->SwiftMailer->send($view, $subject, $method, true)) {
				$this->log("Error sending email");
			}
		}
		catch(Exception $e) {
			$this->log("Failed to send email: ".$e->getMessage());
		}

	}

}[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2010-03-20 09:39:12</wp:post_date>
		<wp:post_date_gmt>2010-03-20 09:39:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>implementare-velocemente-una-newsletter-in-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="newsletter"><![CDATA[newsletter]]></category>
		<category domain="post_tag" nicename="swiftmailer"><![CDATA[swiftmailer]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Contact</title>
		<link>http://www.itora.net/blog/contact/</link>
		<pubDate>Sun, 21 Mar 2010 21:31:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?page_id=83</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>itora.net</strong>
Sonnenallee 201,
12059 neukölln
Berlin
tel 0049 15773827630

[contact-form 1 "Contact form 1"] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2010-03-21 21:31:46</wp:post_date>
		<wp:post_date_gmt>2010-03-21 21:31:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>conoscere la posizione di un dominio su google per determinate keywords</title>
		<link>http://www.itora.net/blog/2010/03/24/conoscere-la-posizione-di-un-dominio-su-google-per-determinate-keywords/</link>
		<pubDate>Wed, 24 Mar 2010 08:51:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[Si, lo script permette di fare quello che che dice il titolo di questo post.
Ho aggiunto allo script <a href="http://www.geekology.co.za/blog/2009/02/python-script-to-check-google-rankings-for-domain-and-search-term/">rankcheck.py</a> un file di testo che elenca le keywords che vogliamo testare e un file che legge queste keywords e le passa a rankcheck.py.

Scaricarsi i file dal mio repo su <a href="http://github.com/edap/checkdomain">github</a>. Mettere tutto in una cartella nella vostra home directory. Settare i path del file rankcheck.py e keywords_list.txt in checkdomain.py. Nello stesso file, scegliete il dominio che volete testare.
Se volete i risultati su un file da passare al vostro cliente, dalla console:
[shell]python chekdomain.py &gt; risultati.txt[/shell] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2010-03-24 08:51:17</wp:post_date>
		<wp:post_date_gmt>2010-03-24 08:51:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conoscere-la-posizione-di-un-dominio-su-google-per-determinate-keywords</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="posizionamento-sui-motori"><![CDATA[posizionamento sui motori]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="script"><![CDATA[script]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Warning: strtotime(), cakephp 1.2 e php 5.3</title>
		<link>http://www.itora.net/blog/2010/04/03/warning-strtotime-cakephp-1-2-e-php-5-3/</link>
		<pubDate>Sat, 03 Apr 2010 10:41:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[Potrebbe capitare di ricevere questo warning su di un vostro sito sviluppato con cake.
<code>Warning: strtotime() [function.strtotime]: It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected 'Europe/Berlin' for 'CEST/2.0/DST' instead in /home/da/public_html/under/cake/libs/cache.php on line 429</code>

Per eliminarlo, basta settare correttamente il timezone nel vostro php.ini
Per esempio:
<code>date.timezone = Europe/London</code>
Un elenco di tutti i timezone disponibili può essere trovato qui:
<a href="For example: date.timezone = Europe/London http://uk2.php.net/manual/en/timezones.europe.php">http://uk2.php.net/manual/en/timezones.europe.php</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2010-04-03 10:41:54</wp:post_date>
		<wp:post_date_gmt>2010-04-03 10:41:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>warning-strtotime-cakephp-1-2-e-php-5-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Friendly URL con CakePHP</title>
		<link>http://www.itora.net/blog/2010/04/11/friendly-url-con-cakephp/</link>
		<pubDate>Sun, 11 Apr 2010 15:21:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[Per una corretta indicizzazione del nostro sito sui motori di ricerca, le URL dovrebbero contenere delle parole chiave coerenti con i contenuti.
Ecco quindi che una pagina dalla url:
<strong>www.miosito.com/view/24</strong>
dovrebbe diventare
<strong>www.miosito.com/view/come-ottenere-friendly-url
</strong>per essere più appetibile al motore di ricerca.

Per ottenere delle Friendly URL in cakePHP basta scaricare dal<a href="http://github.com/mariano/syrup/blob/master/models/behaviors/sluggable.php"> repo su github di Mariano Iglesias</a> "sluggable behavior" e metterlo in app/model/behavior/sluggable.php.

Aggiungrere questa linea nel model 'articolo', che dice a cake di usare il behaviors prima scaricato:
[php]
var $actsAs = array('Sluggable'); 
[/php]
Ora l'articolo può essere richiamato da un nome significativo e non dall'id. Aggiungiamo quindi nella tabella 'Articoli' il campo 'slug'. Se volete cambiare il nome di questo campo, o utilizzare il campo title, o vedere altre opzioni, qui le potete trovare <a href="http://bakery.cakephp.org/articles/view/sluggable-behavior">http://bakery.cakephp.org/articles/view/sluggable-behavior</a>
Dovete poi modificare la funzione view del vostro controller, aggiungendo il campo slug.
[php]
function view($slug = null) {
    if(!$slug){
            $this->Session->setFlash(__('Invalid Articolo', true));
            $this->redirect(array('action' => 'index'));
    }
    $articolo = $this->Articolo->findBySlug($slug);
    $this->set('articolo', $articolo);
}
[/php]

Per richiamare l'articolo, passiamo al metodo view il valore del campo slug anzichè l'id.
[php]
<?php echo $html->link('Articolo bello', array('controller'=>'Articoli', 'action'=>'view', 'valore del mio campo slug'))  ?>
[/php]
Per far si che ogni volta che aggiungete un nuovo articolo, o che vogliate modificarne uno esistente, venga aggiornato il valore del campo 'slug', dovete settare il valore di a true nel vostro model
[php]
var $actsAs = array('Sluggable' => array( 'overwrite' => true)); 
[/php]

Una volta fatto questo, potremmo anche decidere di migliorare ulteriormente l'url, passando da:
<strong>www.miosito.com/view/come-ottenere-friendly-url
</strong> a
<strong>www.miosito.com/articoli_SEO/come-ottenere-friendly-url
</strong>

per far questo basta aggiungere un alias nel file routes.php
[php]
Router::connect('/articoli_SEO/*', array('controller' => 'articoli', 'action' => 'view'));
[/php]

In CakePHP si possono fare tante cose modificando il file routes.php.
Una buona lettura la trovate <a href="http://bakery.cakephp.org/articles/view/cakephp-s-routing-explained">qui</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2010-04-11 15:21:53</wp:post_date>
		<wp:post_date_gmt>2010-04-11 15:21:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>friendly-url-con-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="behaviors"><![CDATA[behaviors]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="friendly-url"><![CDATA[Friendly URL]]></category>
		<category domain="post_tag" nicename="posizionamento-sui-motori"><![CDATA[posizionamento sui motori]]></category>
		<category domain="post_tag" nicename="seo"><![CDATA[SEO]]></category>
		<category domain="post_tag" nicename="sluggable"><![CDATA[sluggable]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>upload immagini con resize automatico in CakePHP</title>
		<link>http://www.itora.net/blog/2010/04/22/upload-immagini-con-resize-automatico-in-cakephp/</link>
		<pubDate>Thu, 22 Apr 2010 14:01:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[Capita spesso di dover inserire un form per l'upload delle immagini nella sezione amministrativa del nostro sito. 
C'è un <a href="http://github.com/tute/Thumbnail-component-for-CakePHP/">component</a> che fa al caso nostro, scala automaticamente ogni immagine in tre formati, big,med,small e la carica nella cartella predefinita.
I passi per la configurazione sono pochi, presenti sul repo. 
Dopo aver installato correttamente il component, ricordatevi che il path del file va salvato nel database. Modifichiamo quindi il controller per poter salvare il path dell'immagine nel campo 'file_path'
[php]
function admin_add() {
        if (!empty($this->data)) {
                $this->Pianta->create();
                if ($this->Pianta->save($this->data)) {
                        $file_path = $this->Attachment->upload($this->data['Pianta']['Attachment']);
                        if(isset($file_path)){
                            $this->Pianta->saveField('file_path',$file_path);
                        }
                        $this->Session->setFlash(__('The Pianta has been saved', true));
                        $this->redirect(array('action' => 'index'));
                } else {
                        $this->Session->setFlash(__('The Pianta could not be saved. Please, try again.', true));
                }
        }
}
[/php]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2010-04-22 14:01:45</wp:post_date>
		<wp:post_date_gmt>2010-04-22 14:01:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upload-immagini-con-resize-automatico-in-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="images-upload"><![CDATA[images upload]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fatal error: Call to a member function setFlash() on a non-object</title>
		<link>http://www.itora.net/blog/2010/05/14/fatal-error-call-to-a-member-function-setflash-on-a-non-object/</link>
		<pubDate>Fri, 14 May 2010 17:34:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[Ovvero, cose basilari per la migrazione da cake 1.2 a cake 1.3
Partiamo con l'errore che leggete nel titolo. Il component Session non è più incluso di default. Va quindi aggiunto nell'app_controller.php
[php]
class AppController extends Controller{
var $components = array('Auth','Session);
[/php]
Routing.admin è deprecato.
[php]
//da:
Configure::write('Routing.admin', 'admin');

//a:
Configure::write('Routing.prefixes', array('admin'));

[/php]
<ul>
	<li>Il metodo del() nei controller è sostituito con delete()</li>
	<li>cake/tua_app_cake_1.2/webroot/index.php è da sostituire con index.php di cake 1.3</li>
	<li>Il metodo renderElement non è più supportato, al suo posto usare Element</li>
	<li>$javascript-&gt;link() va sostituito con $html-&gt;script()</li>
	<li>$javascript-&gt;codeBlock() va sostituito con $html-&gt;scriptBlock()</li>
	<li>In route.php, sostituire route.admin</li>
</ul>
Se avete installato dei plugin esterni, se avete scritto dei component personalizzati, controllate la <a href="http://book.cakephp.org/view/1561/Migrating-from-CakePHP-1-2-to-1-3">guida ufficiale</a>, le novità sono parecchie.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2010-05-14 17:34:26</wp:post_date>
		<wp:post_date_gmt>2010-05-14 17:34:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fatal-error-call-to-a-member-function-setflash-on-a-non-object</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="migrazione"><![CDATA[migrazione]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cakePHP todolist plugin</title>
		<link>http://www.itora.net/blog/2010/05/24/cakephp-todolist-plugin/</link>
		<pubDate>Mon, 24 May 2010 18:42:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[Ho realizzato un plugin per cakePHP che permette di creare una ToDo list, aggiungere dei compiti e assegnarli a diversi users.
<a href="http://github.com/edap/todolist">http://github.com/edap/todolist</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2010-05-24 18:42:25</wp:post_date>
		<wp:post_date_gmt>2010-05-24 18:42:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-todolist-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="960grid"><![CDATA[960grid]]></category>
		<category domain="post_tag" nicename="behaviors"><![CDATA[behaviors]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="post_tag" nicename="tree"><![CDATA[tree]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cakePHP paypal component</title>
		<link>http://www.itora.net/blog/2010/07/23/cakephp-paypal-component/</link>
		<pubDate>Fri, 23 Jul 2010 16:08:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[Ho realizzato un component per il methodo "parallel payment" previsto dalle API di Paypal. Questo metodo permette di pagare piu' utenti con un solo checkout. Utile nel caso aveste un negozio online dove piu' persone devono ricevere il pagamento.
Tutto sul mio repo <a href="http://github.com/edap/cakePHP_paypal_component">http://github.com/edap/cakePHP_paypal_component</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2010-07-23 16:08:29</wp:post_date>
		<wp:post_date_gmt>2010-07-23 16:08:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-paypal-component</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="paypal"><![CDATA[paypal]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing in CakePHP</title>
		<link>http://www.itora.net/blog/?p=247</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[Ci sono due tipi di test. Lo Unit Testing ed il Web Testing.
SPEIGARE COSA SONO

<strong>Unit Testing
</strong>Cominciamo col generare automaticamente le fixtures che ci servono usiamo la console di cake

cake bake fixture all]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2010-12-17 12:20:24</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP e Uploadify</title>
		<link>http://www.itora.net/blog/?p=287</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2011-01-22 11:12:57</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cakePHP testing</title>
		<link>http://www.itora.net/blog/?p=335</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[I tests sono importanti, aiutano a scrivere miglior codice, e ci risparmieranno tempo in futuro. Poniamo il caso di dover aggiornare la nostra applicazione con una nuova versione di cake, o peggio ancora, da php5 a php..6. Se nella vostra applicazione avete scritto dei test, potete velocemente verificare cosa funziona e cosa no. Se non lo avete fatto, vi tocca spulciare i controller, le view e i model alla ricerca di qualcosa che non va. 
Per il testing CakePHP si appoggia su SimpleTest. Nel futuro e' previsto il passaggio a phpUnit.
Per cominciare a testare la vostra applicazione:
<ol>
	<li>scaricate SimpleTest (la versione 1.01, perche' la piu' recente non funziona con cake)</li>
	<li>spostatevi in http://localhost/test e verificate che tutto funzioni. Settatevi un database di test/li>
	<li>create le fixture da console, lasciate perdere fixturizer o latri script che si trovano in giro, cakephp genere la fixture, basta seguire le indicazioni di bake. Supponiamo di avere un applicazione funzionante, con dei record gi'ainseriti nelle nostre tabelle. A questo punto lanciate bake<br>
[bash]
cd cake/console
./cake bake

[D]atabase Configuration
[M]odel
[V]iew
[C]ontroller
[P]roject
[F]ixture
[T]est case
[Q]uit
What would you like to Bake? (D/M/V/C/P/F/T/Q) 
F

Possible Models based on your current database:
1. Audio
2. Ecc
Enter a number from the list above,
type in the name of another model, or 'q' to exit  
[q] > 1

Would you like to import schema for this fixture? (y/n) 
[n] > n

Would you like to use record importing for this fixture? (y/n) 
[n] > n

Would you like to build this fixture with data from User's table? (y/n) 
[n] > y

Please provide a SQL fragment to use as conditions
Example: WHERE 1=1 LIMIT 10  
[WHERE 1=1 LIMIT 10] > 

Baking test fixture for User...
[/bash]
</li>
</ol>
Sempre dalla console, create i tests controller. Dovrete riscriverli, ma alemno avrete un template con l' elenco delle funzioni da testare gia' scritto.
[bash]
cd cake/console
./cake bake

[D]atabase Configuration
[M]odel
[V]iew
[C]ontroller
[P]roject
[F]ixture
[T]est case
[Q]uit
What would you like to Bake? (D/M/V/C/P/F/T/Q) 
T
[/bash]
Seguite le risposte di default e tutto andra' per il meglio.
Ora abbiamo i file necessari per cominciare a sporcarci le mani. In <a href="http://localhost/test">http://localhost/test</a> dovreste visualizzare la pagina con i test. Se cosi' non fosse avete sbagliato qualcosa nell'installazione dei test. Controllate il manuale di cake per eventali errori.
Per testare i controller seguite questo <a href="http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way">post</a> sul blog di mark story ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2011-07-13 11:00:38</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Pragmatic Programmer</title>
		<link>http://www.itora.net/blog/?p=391</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[Scrivo qui alcune note riguardo questo libro appena letto. Non c'e' tutto. C'e' solo quello che ho ritenuto opportuno segnarmi. In tutta sincerità ho trovato questo libro un pò deludente rispetto alle recensioni trovate in rete. Una buona lettura, ben lungi da essere un' "Illuminazione"
<strong>Estimating:
</strong>Choose the right units, 130 working days it's not the same as "about 3 months".
Find out the critical parameters, give each parameter a value.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2011-09-06 14:51:06</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.itora.net/blog/2011/09/20/427/</link>
		<pubDate>Tue, 20 Sep 2011 21:25:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=427</guid>
		<description></description>
		<content:encoded><![CDATA[itora.net
Harzerstr. 64
12059 neukölln
Berlin
tel 0049 15773827630

[contact-form 1 "Contact form 1"] ]]></content:encoded>
		<excerpt:encoded><![CDATA[Contact]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date>2011-09-20 21:25:50</wp:post_date>
		<wp:post_date_gmt>2011-09-20 21:25:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>427</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="main"><![CDATA[main]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Has many through</title>
		<link>http://www.itora.net/blog/?p=518</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[http://guides.rubyonrails.org/association_basics.html#the-has_many-through-association
http://buckybits.blogspot.com/2011/08/associating-hasmany-relationships-in.html
http://upcomer.wordpress.com/2011/03/10/relationship-concepts-in-rails-3/
http://garbled.benhamill.com/2011/08/a-smarter-has_many-through/
http://www.unixgods.org/~tilo/Rails/Rails_polymprphic_has_many_through_relationships.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date>2012-03-02 17:23:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cakePHP facebook plugin</title>
		<link>http://www.itora.net/blog/2010/07/29/cakephp-facebook-plugin/</link>
		<pubDate>Thu, 29 Jul 2010 12:36:52 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>OUTDATED, questo post si riferisce al vecchio plugin che utilizzava le api OLD rest di facebook. A breve come utilizzare il nuovo plugin.</strong>

Ho scaricato questo <a href="http://facebook.webtechnick.com/ ">http://facebook.webtechnick.com/ </a>plugin per integrare facebook in cakePHP.
Le cose belle di questo plugin sono tre:
1)Permette di integrare il login in facebook con la nostra applicazione
2)Ha un helper <a href="http://facebook.webtechnick.com/share">a prova di idiota</a> per inserire i pulsanti di facebook come "i like it" o "share".
3)E' facile attingere dalle api per aggiungere nuove funzionalita' al component "Connect.php"

Su quest'ultimo punto, un piccolo esempio. Se avete la necessità di far si che un utente possa pubblicare un link sul wall in facebook dal vostro sito, potete aggiungere al component Connect.php questa semplice funzione, ed utilizzarla direttamente nel vostro controller:
[php]
    function postLinkOnWall($url, $message, $uid){
            $this->FacebookApi->api_client->links_post($url, $message, $uid);
    }
[/php]

Secondo la nuova policy di facebook che entra in vigore il 30 luglio 2010, la vostra applicazione dovrà richiedere all'utente quali <a href="http://developers.facebook.com/docs/authentication/permissions">Extended Permissions</a> concedervi. Nel caso del link sul wall, il permesso che ci interessa è il "publish_stream". Nell'helper c'è l'apposito metodo "promptPermission" che si occupa di questo, ma se volete personalizzare il messaggio, potete inserire il seguente codice fbml:
[html]
<fb:prompt-permission perms="publish_stream">
    Would you like to allow my application to share in facebook this comments?
</fb:prompt-permission>
[/html]

Per verificare se l'utente ha i permessi richiesti, possiamo aggiungere una funzione al component, e richiamarla quando ne abbiamo bisogno:
[php]
    function hasPublishPermitted($ext_perm, $uid){
        return $this->FacebookApi->api_client->users_hasAppPermission($ext_perm, $uid);
    }
[/php]

Se ci sono altre funzioni alle quali volete accedere dal component "Connect", vi consiglio di leggervi il file /vendors/facebook/php/facebookapi_php5_restlib.php]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2010-07-29 12:36:52</wp:post_date>
		<wp:post_date_gmt>2010-07-29 12:36:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-facebook-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="facebook"><![CDATA[facebook]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>come integrare twitter@anywhere nell&#039;autenticazione di cakePHP</title>
		<link>http://www.itora.net/blog/2010/07/31/come-integrare-twitteranywhere-nellautenticazione-di-cakephp/</link>
		<pubDate>Sat, 31 Jul 2010 12:11:06 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[Twitter @anywhere è l'API di twitter che vi permette di integrare la funzionalità di twitter nel vostro sito con poco codice javascript.
Registrare la vostra application, richiedere le API e cominciare ad usarle sul vostro sito è una cosa che si fa <a href="http://dev.twitter.com/anywhere">velocemente</a> e che non spiego qui.
La cosa che mi interessa è l'integrazione di twitter anywhere nella mia application...ovvero:
Come faccio a far si che se un utente si logga su twitter viene registrato nel mio database ed automaticamente loggato?

Dovrò gestire l'output di twitter anywhere e tramite ajax passarlo ad un handler nel nostro controller che loggherà l'utente in caso sia andato tutto bene, restituirà un errore in caso contrario.

Per prima cosa includiamo questi 2 file js nell'header del nostro template.
[php]
echo $html->script("jquery.js");
echo $html->script("checkTwitterUsername.js");
[/php]

Jquery,js lo trovate sul sito di jquery, lo script checkTwitterUsername.js è una funzione che prende l'output di twitter@anywhere e lo passa all'handler ajax che si occuperà di loggare l'utente.

[javascript]
/*place a <div id = "reply"></div> if you want to check te response */
function checkTwitterUsername (twitterusername) {
   if (twitterusername == undefined) {
       alert('twitterusername not setted');
   }else{
        $.ajax({
            type : "POST",
            url : "/users/handleTwitterUser",
            data : {name : twitterusername},
            success : function (response) {
                $("#reply").append(response);
                window.location.reload();
            },
            error : function (response) {
                $("#reply").append(response);
            }
        });
    }
}
[/javascript]
includiamo anche l'element twitter_login.ctp, che fa uso di twitter @anywhere, che trovate qui sotto
[php]
<? echo $this->element("twitter_login")?>
[/php]

twitter_login.ctp
[php]
<?php
$id = 'twitter-login-button-'.rand(1000,9999);
echo '<span id="'.$id.'"></span>';
echo $html->scriptBlock("
    twttr.anywhere(function (T) {
        var currentUser,
            screenName,
            profileImage,
            profileImageTag;

        if (T.isConnected()) {
            currentUser = T.currentUser;
            screenName = currentUser.data('screen_name');
            profileImage = currentUser.data('profile_image_url');
            profileImageTag = \"<img src='\" + profileImage + \"'/>\";
            $('#{$id}').append(\"Logged in as \" + profileImageTag + \" \" + screenName );
            $('#signout').bind(\"click\", function () {
                twttr.anywhere.signOut();
                window.location.reload();
            });

        } else {
            T('#{$id}').connectButton();
            T.bind(\"authComplete\", function () {
                if (T.isConnected()) {
                    currentUser = T.currentUser;
                    screenName = currentUser.data('screen_name');
                    checkTwitterUsername(screenName);
                }
            });

        };

    });

    ");
?>

[/php]

Nella vostra tabelle Users aggiungete un campo twitter_username, nel controller users aggiungete questo metodo
[php]
/**
 * It's called by checkTwitterUsername.js
 * Once a user is logged in twitter:
 * 1)if it's not logged in your application and there is no twitter_username as the twitter user logged,
 * create and log the user in your application.
 * If a user with the same twittername exists, log the user.
 * 2)If the user is logged, check if he has a twitter_username, if not, update the value "twitter username"
 *
 * @return string
 * @access public
 **/
function handleTwitterUser(){
	$this->autoRender = false;
	$msg = "";
	if(!empty($_POST['name'])){
		$name = $_POST['name'];
		if(!$this->Auth->user()){
			$user = $this->User->findByTwitterUsername($name);
			if(!$user){
				//generate passowrd
				srand ((double) microtime( )*1000000);
				$random_number = rand(0,10);
				$user['username'] = $name;
				$user['twitter_username'] = $name;
				$user['password'] = $this->Auth->password($random_number);
				$user['is_active'] = 1;
				$user['is_verified'] = 1;
				$this->User->create();
				$this->User->save($user);
				$msg = "User saved and ";
			}
			$this->Auth->login($user);
			if($this->Session->check('Auth.User')) {
				App::import('Model', 'User');
				$User = new User;
				$User->store($this->Session->read('Auth'));
				$User->store(array('User' => array('is_loggedin' => true)));

			}
			$msg.= "User logged";
			return $msg;
		}else{
			$user = $this->User->findByTwitterUsername($name);
			if(!$user){
				$this->User->id = User::get('User.id');
				$this->data['User']['twitter_username']=$name;
				$this->User->store(array('User' => array('twitter_username' => $name)));
				$this->User->save($this->data);
				$msg = "your twitter username is now associated with yours profile";
				return $msg;
			}
		}
	}else{
		$error = "Error, we could not associate your twitter username with your profile";
		return $error;
	}
}
[/php]
In questa porzione di codice faccio uso di "$User = new User;" per salvare e recuperare in ogni parte della mia applicazione informazioni relative all'utente. Questa tecnica è spiegata bene, con esempi pratici nel libro gratis scaricabile online http://www.pseudocoder.com/free-cakephp-book/

Per poter sloggare l'utente automaticaente sia da twitter che dalla vostra applicazione, dovete far si che il link a logout abbia l'id "signout".
[php]
echo $this->Html->link('logout', array('controller' => 'users', 'action' => 'logout' ),
                            array('id'=>'signout')
                );
[/php]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2010-07-31 12:11:06</wp:post_date>
		<wp:post_date_gmt>2010-07-31 12:11:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>come-integrare-twitteranywhere-nellautenticazione-di-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auth"><![CDATA[auth]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="twitter-anywhere"><![CDATA[twitter @anywhere]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby On Rails Tutorial, autenticazione con clearance</title>
		<link>http://www.itora.net/blog/2010/08/07/ruby-on-rails-tutorial-autenticazione-con-clearance/</link>
		<pubDate>Sat, 07 Aug 2010 18:04:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://github.com/thoughtbot/clearance">Clearance</a> è una gem per Ruby On Rails che permette di integrare velocemente un sistema di autenticazione e registrazione degli utenti. Per installarla nella vostra app:
da root
[bash]
# gem install clearance
[/bash]
poi da utente normale, modificate il file environment.rb e aggiungete la linea "config.gem "clearance", :version => "0.8.8"".
Spostatevi nella directory della vostra app.
[bash]
rake gems:install
rake gems:unpack
[/bash] 
Ora, nella vostra cartella vendor/gems dovrebbe esserci clearance. Installare le gemme in vendor
quindi generate i controller, le view e i model necessari:
[bash]
script/generate clearance
[/bash]

per aggiungere la richiesta d'autenticazione nel vostro controller, semplicemente aggiungete questo codice nel vostro metodo before_filter
[ruby]
 before_filter :authenticate
[/ruby]
Per poter includere i link al login/logout nella vostra applicazione, aggiungete nella view
[ruby]
  <div id="navigation">
    <% if signed_in? %>
      <%= link_to 'Sign out', sign_out_path %>
    <% else %>
      <%= link_to 'Sign up', sign_up_path %>
      <%= link_to 'Sign in', sign_in_path %>
    <% end %>
  </div>
[/ruby]
Se tutto ha funzionato, a questo indirizzo dovreste vedere il form di login http://localhost:3000/sign_in.
Per una lista completa delle url raggiungibili:
[bash]
rake routes
[/bash]
Segnalo la <a href="http://groups.google.com/group/thoughtbot-clearance">ML</a> del progetto e il <a href="http://wiki.github.com/thoughtbot/clearance/">wiki</a> su github, utili nel caso dovreste avere difficoltà durante la configurazione.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2010-08-07 18:04:03</wp:post_date>
		<wp:post_date_gmt>2010-08-07 18:04:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-tutorial-autenticazione-con-clearance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="post_tag" nicename="clearance"><![CDATA[clearance]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails, creazione pagine statiche</title>
		<link>http://www.itora.net/blog/2010/08/08/ruby-on-rails-creazione-pagine-statiche/</link>
		<pubDate>Sun, 08 Aug 2010 12:11:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[Supponiamo di avere delle pagine che non richiedono interazioni con il databasa, per esempio 'info', 'terms' e 'contact'.
creiamo le views per le pagine statiche così:
[shell]
cd app/views
mkdir pages
touch pages/info.html.erb
touch pages/terms.html.erb
touch pages/contact.html.erb
[/shell]

Creiamo un controller chiamato pages_controller.rb
[ruby]
class PagesController < ApplicationController
  def show
    page = params[:id]
    render :template => "pages/#{params[:id]}"
  end
end
[/ruby]

in routes.rb aggiungiamo questa regola
[ruby]
  map.page ':id', :controller => 'pages',
                  :action => 'show', 
                  :requirements => { :id => /info|terms|contact/ }
[/ruby]

nel nostro layout, aggiungiamo il menu con le voci appena create:
[ruby]
<%= link_to 'Info', page_path('info') %>
<%= link_to 'Terms', page_path('terms') %>
<%= link_to 'Contact', page_path('contact') %>
[/ruby] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2010-08-08 12:11:37</wp:post_date>
		<wp:post_date_gmt>2010-08-08 12:11:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-creazione-pagine-statiche</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="static-pages"><![CDATA[static pages]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP Salvare la data del login ad ogni autenticazione.</title>
		<link>http://www.itora.net/blog/2010/08/23/cakephp-salvare-la-data-del-login-ad-ogni-autenticazione/</link>
		<pubDate>Mon, 23 Aug 2010 15:08:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[Se volete salvare la data del login dei vostri utenti, dovet disabilitare l'autoRedirect nel vostro app_controller. Senza questo piccolo accorgimento, il codice all'interno della funzione login() viene ignorato.
[php]
    function beforeFilter() {
        ....
	$this->Auth->autoRedirect = false;
        ....
    }
[/php]

[php]
	function login() {
	    if($this->Auth->user()){
		$this->loginDate();
                //reindirizzamento dopo un corretto login
		$this->redirect(array('controller' => 'users', 'action' => 'view'));
	    }
	}

	function loginDate() {
	    $this->User->id = $this->Session->read('Auth.User.id');
	    $now = date("Y-m-d H:i:s");
	    $this->User->saveField('last_login', $now);
	}
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2010-08-23 15:08:23</wp:post_date>
		<wp:post_date_gmt>2010-08-23 15:08:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-salvare-la-data-del-login-ad-ogni-autenticazione</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auth"><![CDATA[auth]]></category>
		<category domain="post_tag" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installare Bedita</title>
		<link>http://www.itora.net/blog/2010/08/23/installare-bedita/</link>
		<pubDate>Mon, 23 Aug 2010 16:29:58 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[Bedita è un CMS basato su CakePHP. O meglio, come lo definiscono i <a href="http://www.channelweb.it">suoi sviluppatori</a>: <em>BEdita is a modular framework that features a back-end Content Management System out-of-the-box.</em>

Vediamo come installarlo:
Scaricate bedita dal <a href="http://bedita.com/">sito ufficiale</a>  
Create un database e un utente che abbia grant permissions, modificate il file bedita-app/config/database.php e impostate corretamente il vostro user, password e nome del database.
Abilitate sul vostro server la webroot per bedita, supponendo che stiate installando bedita in locale, e che vogliate visualizzare bedita a http://localhost, il vostro file /etc/apache2/sites-available/bedita avra' la variabile DocumentRoot uguale a /path_to_bedita/bedita-app/webroot.
Maggiori informazioni su questo aspetto riguradante la configurazione di apache2 le trovate <a href="http://guide.debianizzati.org/index.php/LAMP:_Linux,_Apache,_MySQL_e_PHP">qui</a>
Create una directory dove bedita caricherà i file, foto, doc ecc...per esempio "media" 
Spostatevi nella cartella "bedita".
Assicuratevi che il webserver abbia i permessi di scrittura su tale cartella. Supponendo che il server si apache, e che la cartella sia bedita-app/webroot/media
[bash]
chmod -R 777 bedita-app/webroot/media
chown www-data:www-data -R bedita-app/webroot/media
[/bash]
fate la stessa operazione per bedita-app/tmp.
Settate le due variabili mediaRoot e mediaUrl nel file bedita-app/config/bedita.sys.php
[php]
$config['mediaRoot'] = "path_to_bedita_".DS."bedita-app".DS."webroot".DS."media";
$config['mediaUrl'] = "http://localhost/media";
[/php]
ovviamente, sostituite a "path_to_bedita" il percorso assoluto dove avete installato bedita nel mio caso 
[php]
$config['mediaRoot'] = "/home/da/public_html/bedita".DS."bedita-app".DS."webroot".DS."media";
[/php]

nella cartella bedita lanciate lo script che provvederà' a creare le tabelle necessarie.
[bash]
./cake.sh bedita init
[/bash]
Se tutto è andato a buon fine, a questo indirizzo <a href="http://localhost">http://localhost</a> dovreste vedere il pannello d'amministrazione dal quale loggarvi.
user : bedita
pwd : bedita.
fatto.

Perchè dovrei usare bedita quando mi trovo già bene con cakePHP?
Perchè tutto il backend è già fatto, tutto è già predisposto per la vostra galleria immagini, per poter tradurre il sito in altre lingue, per gestire una rubrica degli indirizzi, per inviare una newsletter, per gestire gli utenti. Tutto lavoro già fatto, e fatto bene. 
Inoltre, la procedura d'installazione è molto facile, e l'interfaccia del pannello di amministrazione è molto elegante e intuitiva. Insomma, da provare.

<strong>ah..</strong>
All'interno della cartella bedita/frontends ci sono degli esempi di come è possibile integrare il potente backend di bedita nel frontend della nostra applicazione. Per provare al volo il frontend stile wordpress aggiungete nella vostra cartella /etc/apache2/sites-available il file bedita-wp. Come webroot impostate il path /path_to_bedita/frontends/wp.example.com/webroot. Ricordatevi di settare i permessi alla cartella tmp in modo che sia accessibile in scrittura al server.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2010-08-23 16:29:58</wp:post_date>
		<wp:post_date_gmt>2010-08-23 16:29:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>installare-bedita</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bedita"><![CDATA[bedita]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[installare-bedita-rc]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Christiano]]></wp:comment_author>
			<wp:comment_author_email>xhoxho@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.bedita.com</wp:comment_author_url>
			<wp:comment_author_IP>93.39.210.103</wp:comment_author_IP>
			<wp:comment_date>2010-12-13 17:00:40</wp:comment_date>
			<wp:comment_date_gmt>2010-12-13 17:00:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ciao,
volevo solo segnalare che è stata rilasciata la nuova versione 3.1 stable.
Qui i dettagli succosi:
http://www.bedita.com/news/bedita-31-release]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>script per rimuovere commenti da files php ricorsivamente</title>
		<link>http://www.itora.net/blog/2010/11/16/script-per-rimuovere-commenti-da-files-php-ricorsivamente/</link>
		<pubDate>Tue, 16 Nov 2010 11:20:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[Capita che un cliente vi commisioni un progetto, ve ne faccia fare 3/4 e poi decida di non pagarvi l'ultima parte dello sviluppo, quando ormai il grosso e' fatto e le cose da refinire sono poche.
Dovete comunque consegnare il codice ma volete per lo meno togliere i commenti.
Allora piazzate questi due script nella direcotry dove risiedono i file che volete "spurgare":
rm-phpcomments.sh e strip_comments.php.
rm-phpcomments.sh trova i file php da ripulire e li passa in input a strip_comments.php.
[bash]
#!bin/bash
find . -name "*.php" | while read file
do
	php strip_comments.php $file
done
[/bash]
strip_comments.php li riscrive levando i commenti
[php]
<?php
	$source = $argv[1];
	$fileStr = file_get_contents($source);
	$newStr  = '';

	$commentTokens = array(T_COMMENT);

	if (defined('T_DOC_COMMENT'))
	    $commentTokens[] = T_DOC_COMMENT; 	if (defined('T_ML_COMMENT'))
	    $commentTokens[] = T_ML_COMMENT;  
	$tokens = token_get_all($fileStr);

	foreach ($tokens as $token) {    
	    if (is_array($token)) {
		if (in_array($token[0], $commentTokens))
		    continue;

		$token = $token[1];
	    }

	    $newStr .= $token;
	}

	$handle = fopen($source, "w");
	if($handle){
		fwrite($handle, $newStr);
		fclose($handle);
		//echo "open";
	}else{
		echo "no fucking handle!!";
	}
?>
[/php]
Se il cliente era particolarmente antipatico, se siete troppo affezionati al vostro codice, o  se non avete nessun tipo di spirito solidale verso la persona che dovra' finire il vostro lavoro, potete modificare strip_comments.php inserendo questa simpatica <a href="http://www.raizlabs.com/software/phpobfuscator/">libreria</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2010-11-16 11:20:18</wp:post_date>
		<wp:post_date_gmt>2010-11-16 11:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>script-per-rimuovere-commenti-da-files-php-ricorsivamente</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="remove-comments"><![CDATA[remove comments]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[FLCMJ]]></wp:comment_author>
			<wp:comment_author_email>sdf@df.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.18.6.44</wp:comment_author_IP>
			<wp:comment_date>2010-12-02 01:37:26</wp:comment_date>
			<wp:comment_date_gmt>2010-12-02 01:37:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Zuuuuuuuuuuuuuuuuu Davide Prati der programmatore!!! Ma sei un secchione di Nerda!!!!
Davideeeeeeeeeee!!
Ormai non ti dico più di scendere da queste parti... magari costruisci uno shuttle (che sarà superato dal tcp-ip, secondo le tue previsioni) e vieni a trovarmi!
EfforZa!!!!
Ciao caro!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>lastexxit@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>178.5.78.150</wp:comment_author_IP>
			<wp:comment_date>2010-12-02 10:19:09</wp:comment_date>
			<wp:comment_date_gmt>2010-12-02 10:19:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bella Ciccio, a Ispica ci torno, ci puoi contare. Qualcuno mi ha pure detto (tanti anni fa) che se avesse aperto un bar, in un futuro ipotetico, mi avrebbe offerto da bere.
Posso dimenticare nomi, indirizzi, numeri di telefono...ma non uscite del genere.

ne viremu mpare!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[FLCMJ]]></wp:comment_author>
			<wp:comment_author_email>asd@asdf.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.42.87.201</wp:comment_author_IP>
			<wp:comment_date>2010-12-02 12:57:27</wp:comment_date>
			<wp:comment_date_gmt>2010-12-02 12:57:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eh, voglio vedere!!! 
Il Boninsegna è venuto e ha bevuto soddisfatto, ora aspetto te! 
Divertiti beddu!! ;D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CakePHP e ACL</title>
		<link>http://www.itora.net/blog/2010/11/17/cakephp-e-acl/</link>
		<pubDate>Wed, 17 Nov 2010 17:28:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[Segnalo qualche link a soluzioni che possono semplificare l'implementazione di ACL in cakePHP
<a href="http://sourceforge.net/projects/bancer/">http://sourceforge.net/projects/bancer/</a>

<a href="https://github.com/Theaxiom/SuperAuth">https://github.com/Theaxiom/SuperAuth</a>

<a href="https://github.com/markstory/acl_extras">https://github.com/markstory/acl_extras</a>

<a href="https://github.com/markstory/cakephp_menu_component">https://github.com/markstory/cakephp_menu_component</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2010-11-17 17:28:44</wp:post_date>
		<wp:post_date_gmt>2010-11-17 17:28:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-e-acl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acl"><![CDATA[ACL]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Implementare Security Component e SSL con CakePHP</title>
		<link>http://www.itora.net/blog/2010/12/09/implementare-security-component-e-ssl-con-cakephp/</link>
		<pubDate>Thu, 09 Dec 2010 13:57:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[CakePHP mette a disposizione un component che permette di rendere la nostra applicazione sicura, per quanto possa essere sicura un applicazione accesibile dal browser, chiaro.
Vediamo come far sì che il nostro sito sia accessibile solo da https:// e non da http://, e come rendere i nostri form sicuri, non editabili con firebug.

Il security component è già nella core di cakePHP, quindi per abilitarlo non dobbiamo fare altro che aggiungere i components necessari in app_controller.php
[php]
var $components = array(
	'Security',
	'RequestHandler'
);
[/php]
 e mettere questa funzione, sempre nel nostro app_controller.php
[php]
	function beforeFilter(){
		$this->Security->requireSecure();
		$this->Security->blackHoleCallback = 'invalid';
	}
[/php]
La funzione requireSecure() obbliga il client ad utilizzare ssl, la proprietà validatePost invece dice che i nostri form vanno validati prima di essere processati, infine blackHoleCallback raccoglie tutte le richieste sporche, quelle che non soddisfano le nostre esigenze di sicurezza. Vediamo nel dettaglio la funzione invalid e forceSSL, entrambe all'interno dell'app_controller.php
[php]
	function invalid() {
		if(!$this->RequestHandler->isSSL()) {
			$this->forceSSL();
		}else{
			$this->cakeError('accessDenied');
		}	
	}

	function forceSSL() {
		$this->redirect('https://' . env('SERVER_NAME') . $this->here);
	}
[/php]
La funzione invalid separa le richieste, quelle che non sono su ssl vengono passate a forceSSL, che provvede
ad indirizzare tutte le richieste su https://, quelle che invece provengono da https:// ma presentano dati alterati maliziosamente, vengono inviate a cakeError('accessDenied'). QUesta funzione presenta un messaggio d'errore personalizzabile. Vediamo come.
Nostra cartella app/ creaiamo un file app_error.php
[php]
<?php
class AppError extends ErrorHandler {	
	public function accessDenied(){
		$name = array('name' => __('Your are a really bad guy...stay away from my app!', TRUE));
		$this->controller->set($name);
		$this->_outputMessage('goaway');
	}	
}
?>
[/php]
Poi, nella cartella app/views/errors creaiamo il nostro template goaway.ctp
[php]
<h2><?php echo $name ?></h2>
[/php]

Abbiamo quindi predisposto la nostra applicazione ad essere accessibile solo su https:// e ad inviare le cattive richieste alla tal pagina. Per escludere un campo dal controllo del form da parte del Security component, dovremo disabilitarlo. Nell'esempio qui sotto, disabilito il confirm pwd in users_controller.php
[php]
function beforeFilter() {
	parent::beforeFilter();
		$this->Security->blackHoleCallback = 'invalid';
		$this->Security->disabledFields = array('User.confirmpassword');
}
[/php]


Ultima cosa, per utilizzare ssl, dovete modificare la configurazione del vostro server. Nel caso utilizziate apache2+linux, <a href="http://www.howtoforge.com/how-to-set-up-an-ssl-vhost-under-apache2-on-ubuntu-9.10-debian-lenny">questa</a> è la guida giusta.
Se volete che il vostro sito sia raggiungibile sia da http che da https(come nel mio caso), ricordatevi che dovete avere due file nella vostra cartella sites-available, uno "miosito" e uno "miosito-ssl", quest'ultimo con "SSLEngine on", come ben descritto nella guida linkata. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2010-12-09 13:57:46</wp:post_date>
		<wp:post_date_gmt>2010-12-09 13:57:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>implementare-security-component-e-ssl-con-cakephp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="security-component"><![CDATA[security component]]></category>
		<category domain="post_tag" nicename="ssl"><![CDATA[ssl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP e MongoDB</title>
		<link>http://www.itora.net/blog/2010/12/28/cakephp-e-mongodb/</link>
		<pubDate>Tue, 28 Dec 2010 16:47:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[Piccola premessa, non tutte le applicazioni possono ricevere vantaggi dall'utilizzo di mongodb.
Alcune caratteristiche di MongoDb:
-&Egrave; scritto in c
-Schema Free!! non necessita di uno schema fisso, ogni record ha il proprio schema. Inoltre, non dobbiamo definire nulla prima di inserire.
- salva i campi ogni volta che salvi un record, quindi campi corti riducono il peso del vostro database (o collection)
Queste le caratteristiche di MongoDB:
-Embedded Objects. Se ho un record (o document, come vedremo poi, la terminologia in mongo db varia da quella di mysql) contenente uno user con il campo "address", il campo "address" puo' essere definito dal document Address, con una via ed un numero civico. Accoppiare gli oggetti User e Address assomiglia a fare una join fra le due tabelle in mysql.

<strong>Non va bene per</strong>:
-Apllicazioni che necessitano funzioni di Join o Transaction.
-Server con poco spazio, questo avviene perchè ogni valore viene salvato con la propria label. Un normale database Mysql è più leggero.
<strong> Va bene per:</strong>
-Applicazioni che richiedono velocità in scrittura e lettura
-Applicazioni che richiedono buona scalabilità

Installiamo php5-dev. Dopo di che lanciamo dalla console
[bash]pecl install mongo[/bash].  Se utilizzate windows...be, vi attaccate.
Modificate il vostro /etc/php5/apache2/php.ini e inserite nella sezione delle extensions la seguente linea [bash]extension=mongo.so[/bash]
Riavviate apache. A questo link potete trovare il pratico <a href="http://us2.php.net/mongo">manuale di mongo su php</a>.
Ora, spostatevi nell'applicazione in cui volete utilizzare mongo db, e scaricatevi il plugin dello sviluppatore giapponese Ichikawa. <a href="http://cake.eizoku.com/blog/">Ichikawa</a> spacca, qui il <a href="http://tv.cakephp.org/video/CakeFoundation/2010/12/24/yasushi_ichikawa_-_how_to_use_mongodb_with_cakephp">video</a> dal quale è tratto questo tutorial.
[bash]
cd app/plugins
git clone http://github.com/ichikaway/mongoDB-Datasource.git mongodb
[/bash]
poi, modifichiamo il file app/config/database.php con dei dati fittizi.
[php]	var $default = array(
'driver' =&gt; 'mongodb.mongodbSource',
'password' =&gt; 'password',
'database' =&gt; 'cakemongo1',
'port' =&gt; '27017',
);
[/php]
Ora, copiamo le cartelle views, controllers e models presenti in /app/plugins/mongodb/samples  in app. Aprite Il file app/models/post.php e decommentate la variabile mongoSchema. Apriamo il nostro  browser a questo indirizzo <a href="http://localhost/posts">http://localhost/posts</a> e clicchiamo su "add data" andando cosi' ad aggiungere il primo "document" (in mongodb row diventa document, column diventa field e database collection. Per altri preziosi parallelismi com mysql, date un occhio a <a href="http://www.mongodb.org/display/DOCS/SQL+to+Mongo+Mapping+Chart">Sql to Mongo Mapping chart</a>).
Ora da console controlliamo i dati inseriti.

[bash]
da@lungimiranza:~$ mongo
show dbs
use cakemongo1
show collections
db.posts.find()
[/bash]

Come risultato otteremo qualcosa di simile
[bash]
{ "_id" : ObjectId("4d1a0a4776aa08bb22000000"), "title" : "regfwerg", "body" : "ertgertg", "hoge" : "ertgertg", "modified" : "Tue Dec 28 2010 17:03:19 GMT+0100 (CET)", "created" : "Tue Dec 28 2010 17:03:19 GMT+0100 (CET)" }[/bash].

Ora lasciamo perdere cakephp, diamo un occhio ad un altra cosa davvero belle in MongoDB. Geospatial index.
Geospatial ci permette di gestire facilmente una collection di coordinate. <a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">Qua</a> maggiori info a riguardo.
All'interno di questo esempio vengono utilizzati i seguenti operatori.
$near per trovare un punto vicino ad un altro
$box per trovare i punti all'interno di un rettangolo
$center per trovare punti all'interno di un cerchio
Salviamo due coordinate dalla console, ricordiamoci che in mongo db non abbiamo bisogno di definire uno schema prima di inserirre dati.
[bash]
db.geotest.save({ loc:[23,113] })
[/bash]
poi diamo un indice alla collection, in questo caso 2d, che sta per 2 dimensions
[bash]db.geotest.ensureIndex({ loc:"2d"})[/bash]
Ora inseriamo un centinaio di punti, sempre da console
[bash]for(i=0; i&lt;100; i++) (db.geotest.save ({loc:[i,i]}))[/bash]
verifichiamo di avere inserito tutto
[bash]db.geotest.find()[/bash]
Proviamo ad utilizzare gli operatori citati prima per identificare un punto.
[bash]db.geotest.find( { loc : { $near : [50,50] } } )[/bash]
Aggiungere un limite alla nostra ricerca in mongodb viene intuitivo
[bash]db.geotest.find( { loc : { $near : [50,50] } } ).limit(6)[/bash]
Troviamo i nostri punti all'interno di un rettangolo
[bash]db.geotest.find( { loc : { $within : { $box : [[1,1],[5,5]] } } } )[/bash]
O partendo da un punto
[bash]db.geotest.find( { loc : { $within : { $center : [[4,4],0.1] } } } )[/bash]
Il secondo valore definisce il raggio, se lo aumentate avrete logicamente un maggior numero di risultati
[bash]db.geotest.find( { loc : { $within : { $center : [[4,4],5] } } } )[/bash] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2010-12-28 16:47:38</wp:post_date>
		<wp:post_date_gmt>2010-12-28 16:47:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-e-mongodb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parsing dei link da un file html con Ruby e Nokogiri</title>
		<link>http://www.itora.net/blog/2011/01/13/parsing-dei-link-da-un-file-html-con-ruby-e-nokogiri/</link>
		<pubDate>Thu, 13 Jan 2011 11:28:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://nokogiri.org/">Nokogiri</a> è una fantastica libreria di ruby che consente di parsare dei file. E' molto intuitiva, e permette di trovare velocemente la soluzione senza necessariamente conoscerla a fondo.
Per esempio, se voglio trovare i link di un documento html:
[ruby]
#/usr/bin/ruby
require 'rubygems'
require 'nokogiri'

f = File.open("home.html")
@doc = Nokogiri::HTML(f)
links = @doc.xpath("//a")
links.each do |l|
	p(l)
end
[/ruby]
La libreria utilizza xpath, trova il tag "a" e lo mette nel node "l". Il risultato può apparire a prima vista confuso.
In realtà, una volta capito il concetto di <a href="http://nokogiri.org/Nokogiri/XML/Node.html">node</a> tutto appare chiaro. Stampiamo quindi a video il percorso assoluto dei link:
[ruby]
#/usr/bin/ruby
require 'rubygems'
require 'nokogiri'

f = File.open("home.html")
@doc = Nokogiri::HTML(f)
links = @doc.xpath("//a")
links.each do |l| 
	print(l['href']+"\n")
end
[/ruby] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2011-01-13 11:28:44</wp:post_date>
		<wp:post_date_gmt>2011-01-13 11:28:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parsing-dei-link-da-un-file-html-con-ruby-e-nokogiri</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nokogiri"><![CDATA[nokogiri]]></category>
		<category domain="post_tag" nicename="parsing"><![CDATA[parsing]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>debian spacca</title>
		<link>http://www.itora.net/blog/2011/02/07/debian-spacca/</link>
		<pubDate>Mon, 07 Feb 2011 17:27:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[sempre.
aprire sources.list con vim, e da li
[bash]
%s/squeeze/wheezy/g
[/bash]
poi
[bash]
aptitude update
aptitude safe-upgrade
[/bash] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2011-02-07 17:27:27</wp:post_date>
		<wp:post_date_gmt>2011-02-07 17:27:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>debian-spacca</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aggiornare-debian-alla-nuova-testing-release"><![CDATA[aggiornare debian alla nuova testing release]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>contare caratteri con umlaut con php</title>
		<link>http://www.itora.net/blog/2011/04/19/contare-caratteri-con-umlaut-con-php/</link>
		<pubDate>Tue, 19 Apr 2011 15:09:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[Non riuscivo a capire come mai uno stesso calcolo che comprendeva la misurazione dei caratteri componenti una stringa desse risultati diversi se eseguito in php o javascript. Dopo aver perso un sacco di tempo a verificare dove fosse l'incongruenza, scopro che strlen si prendeva gioco di me.
[php]
$string = "ÄÄüü";
echo strlen($string); //8!!
[/php]
La umalut (e in generale tutti i caratteri multibyte) non viene letta come ci si aspetta.
Per ovviare a questo, usiamo utf8_decode
[php]
echo strlen(utf8_decode($string)); //4 
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2011-04-19 15:09:59</wp:post_date>
		<wp:post_date_gmt>2011-04-19 15:09:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contare-caratteri-con-umlaut-con-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="myday"><![CDATA[myday]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP check the owner</title>
		<link>http://www.itora.net/blog/2011/05/12/cakephp-check-the-owner/</link>
		<pubDate>Thu, 12 May 2011 12:53:17 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>update cake 2.0</strong>: $this->request->is('ajax') invece del vecchio RequestHandler. 
Capita spesso di dover verificar il proprietario di un item prima di modificarlo.
In cakePHP non esiste (per ora) un metodo dedicato a tale scopo. Cosa abbastanza strana, visto che la convenzione di associare lo User Model ad un altro Model tramite il campo user_id e' esiste da parecchio tempo.
Ho scritto un metodo da inserire nell'app_controller che permette di verificare che l'utente che modifica un iteme sia effettivamente il proprietario. Il metodo e' flessibile e puo' essere utilizzato con qualunque modello sia associato alla tabella Users tramite il campo user_id.

[php]
    function _isOwner($data, $options = array()){
	    if (empty($options['message'])) {
			$flash_message = "You are not allowed to access to this area";
	    }
	    else {
			$flash_message = $options['message'];
	    }

	    if (empty($options['scope'])) {
			$scope = $this->modelClass;
	    }
	    else {
			$scope = $options['scope'];
	    }

	    if (empty($options['redirect'])) {
			$redirect = false;
	    }
	    else {
			$redirect = $options['redirect'];
	    }

	    if ($scope == 'User') {
			$user_field = "id";
	    }
	    else {
			$user_field = "user_id";
	    }
	    $current_user = $this->Session->read('Auth.User.id');
	    if ($data[$scope][$user_field] == $current_user) {
		    return true;
	    }
	    else {
		    if ($redirect) {
			    $this->Session->setFlash($flash_message, 'error');
				//RequestHandler->isAjax() is buggy
			    if($this->request->is('ajax')) {
			    	$this->set('success', false);
			    	$this->set('error', $flash_message);
			    }
			    else {
			    	$this->redirect($redirect);
			    }
		    }
		    return false;
	    }
    }
[/php]

Qualche esempio pratico:
[php]
$post = $this-&gt;Post-&gt;findById($post_id);
$this-&gt;_isOwner($post, array('redirect'=&gt;'/'));
[/php]
Se l'utente loggato non e' il proprietario del post esso verra reindirizzato alla root.
Se invece un utente vuole modificare il proprio profilo all'indirizzo sito.com/users/edit/3 il campo da verificar enon sara' piu' 'user_id' ma l'id del modello 'User'. Per fare questo dobbiamo solo aggiungere impostare il parametro 'scope'.
[php]
$user = $this-&gt;-&gt;User-&gt;findById($id);
$this-&gt;_isOwner($user, array('scope'=&gt; 'User'))
[/php]
Oltre a scope, gi altri parametri che si possono passare a questa funzione sono:
<strong>message</strong> = Il messaggio che vogliamo mostrare dopo il redirect nel caso non ci vada bene quello di default
<strong>redirect = </strong>L'url alla quale vogliamo reindirizzare l'utente. Se questo falore non e' impostato, la funzione restituira' solo TRUE o FALSE senza effettuare il redirect.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2011-05-12 12:53:17</wp:post_date>
		<wp:post_date_gmt>2011-05-12 12:53:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-check-the-owner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="check-the-owner"><![CDATA[check the owner]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP emails non visualizzate correttemente in Squirrelmail o Roundcube</title>
		<link>http://www.itora.net/blog/2011/05/12/cakephp-email-non-visualizzate-correttemente-in-squirrelmail-o-roundcube/</link>
		<pubDate>Thu, 12 May 2011 14:58:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[Se el email spedite dalla vostra applicazione non vengono visualizzate correttamente in programmi come squirrelmail o roundcube, bisogna aggiungere questa porzione di codice prima dell'invio.
[php]
$this->Email->__header[] = 'MIME-Version: 1.0';
$this->Email->from = 'Sprecher <info@eintsprecher.de>';
[/php]
Via <a href="http://www.pixelastic.com/blog/230:displaying-html-mails-sent-from-cakephp-in-squirrelmail">http://www.pixelastic.com/blog/230:displaying-html-mails-sent-from-cakephp-in-squirrelmail</a>

<a href="http://cakephp.lighthouseapp.com/projects/42648-cakephp/tickets/14-email-component-should-set-mime-version-header-when-sendas-html-or-both">http://cakephp.lighthouseapp.com/projects/42648-cakephp/tickets/14-email-component-should-set-mime-version-header-when-sendas-html-or-both</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2011-05-12 14:58:44</wp:post_date>
		<wp:post_date_gmt>2011-05-12 14:58:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-email-non-visualizzate-correttemente-in-squirrelmail-o-roundcube</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LXDE cambiare layout tastiera</title>
		<link>http://www.itora.net/blog/2011/05/14/lxde-cambiare-layout-tastiera/</link>
		<pubDate>Sat, 14 May 2011 16:52:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=306</guid>
		<description></description>
		<content:encoded><![CDATA[LXDE è un desktop leggero che proprio per la sua leggerezza spesso manca di tool grafici "comodi".
Ad esempio poter cambiare il layout della tastiera al volo in xfce c'è un bellissimo aggeggio che fa tutto.
Su LXDE no. Siccome a me piace un desktop leggero(no gnome/ no kde) ma non mi piace perdere ORE sulla riga di comando, ho configurato il mio desktop così, senza una riga di gnome.
Installare <a href="http://fbxkb.sourceforge.net/faq.html">fbxkb</a> e poi lanciare da console questo comando
<pre>
setxkbmap -option grp:switch,grp:shifts_toggle,grp_led:scroll us,de,it
</pre>
Sostituite us, de o it con le lingue che preferite.
Aggiungete il comando nel file .bashrc, in modo da caricarlo ad ogni avvio.

Una volta fatto questo (copio e incollo dal wiki di LXDE):
Right-click on your taskbar
Choose “Add / Remove Panel Items”
Choose “Add”
Choose “Keyboard Layout Switcher”

Fatto. Cambiare lingua è ancora più veloce che con xfce.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2011-05-14 16:52:03</wp:post_date>
		<wp:post_date_gmt>2011-05-14 16:52:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lxde-cambiare-layout-tastiera</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="lxde"><![CDATA[lxde]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mp3 file types</title>
		<link>http://www.itora.net/blog/2011/05/19/mp3-file-types/</link>
		<pubDate>Thu, 19 May 2011 09:36:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[Ho dovuto realizzare un uploader utlizzando questo <a href="http://www.webtechnick.com/blogs/view/221/CakePHP_File_Upload_Plugin">plugin </a> nel quale si possono specificare quali tipi di file e' possibile caricare. L'applicazione si concentra sui file audio, da qui la necessita' di elencare i filetypes consentiti. Non ho ancora trovato una lista completa, non pensavo fossero cosi' tanti e ogni giorno un utente me ne segnala uno nuovo. Ecco l'elenco, spero possa risparmiare tempo a qualcuno.
[php]
'allowedTypes' => array('mp3' => array('audio/mp3',
										'audio/mpeg',
										'audio/mpg',
										'audio/x-amzaudio',
										'audio/x-mp3',
										'audio/mpeg3',
										'audio/x-mpeg3',
										'audio/x-mpeg',
										'audio/x-mpg',
										'audio/mpeg3',
										'audio/x-mpegaudio'
									),
						'ogg' => array('audio/x-vorbis+ogg',
										'audio/x-ogg',
										'application/x-ogg',
										'application/ogg'
										)
),
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2011-05-19 09:36:38</wp:post_date>
		<wp:post_date_gmt>2011-05-19 09:36:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mp3-file-types</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="mp3"><![CDATA[mp3]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git-ftp e alias</title>
		<link>http://www.itora.net/blog/2011/06/26/git-ftp-e-alias/</link>
		<pubDate>Sun, 26 Jun 2011 10:00:11 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[Quasi tutti i progetti su cui lavoro sono sotto git. La necessità di caricare sul server ftp gli ultimi commits mi ha portato a scoprire <a href="https://github.com/resmo/git-ftp">git-ftp</a>. Si <a href="https://github.com/resmo/git-ftp/blob/develop/INSTALL.md">installa</a> su Mac,Win e Linux.
Per installare il pacchetto su debian, consiglio di <a href="http://blog.anantshri.info/howto-add-ppa-in-debian/">aggiungere</a> il <a href="https://launchpad.net/~resmo/+archive/git-ftp">ppa</a> ubuntu dello sviluppatore ed <a href="http://stream-recorder.com/forum/w-gpg-error-http-ppa-launchpad-net-t6741.html">importare la chiave</a> in modo da avere sempre il pacchetto aggiornato.
Per configurare le credenziali di accesso bisogna:
[bash]
$ git config git-ftp.user john
$ git config git-ftp.url ftp.example.com/myfolder
$ git config git-ftp.password secr3t
[/bash]
poi per caricare il tutto
[bash]
$ git ftp push
[/bash]
Se non riuscite a connettervi, verificate che il firewall del vostro hosting non stia bloccando cURL. In ogni caso, gli sviluppatori stanno lavorando ad una nuova versione che utilizza lftp invece che cURL.

Dopo aver fatto questo, veniamo agli <a href="http://www.catonmat.net/blog/git-aliases/">alias</a> per git.
Questi sono quelli che ho aggiunto io al mio file .bashrc
[bash]
alias ga='git add'
alias gp='git push'
alias gfp='git ftp push'
alias gl='git log'
alias gs='git status'
alias gd='git diff'
alias gdc='git diff --cached'
alias gm='git commit -m'
alias gma='git commit -am'
alias gb='git branch'
alias gc='git checkout'
alias gra='git remote add'
alias grr='git remote rm'
alias gpu='git pull'
alias gcl='git clone'
alias glast='git show --pretty="format:" --name-only'
[/bash]
L'ultimo alias elenca i file modificati nell'ultimo commit effettuato.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2011-06-26 10:00:11</wp:post_date>
		<wp:post_date_gmt>2011-06-26 10:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-ftp-e-alias</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="improve-my-day"><![CDATA[improve my day]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git in locale</title>
		<link>http://www.itora.net/blog/2011/06/26/git-in-locale/</link>
		<pubDate>Sun, 26 Jun 2011 12:55:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=325</guid>
		<description></description>
		<content:encoded><![CDATA[non necessariamente un progetto web deve avere l'origin su un server in remoto.
per settare la vostra origin in locale, dopo aver inizializzato il vostro repo, per esempio in /home/me/projektOne, creiamo una cartella /home/me/allMyGitsProject/projecktOne.git, al suo interno e digitiamo
[bash]
git init --bare
[/bash]
Ora ritonrniamo nella cartella contenente il nostro codice versionato /home/me/projectOne
e diciamo a git che l'origin di questo progetto è in /home/me/allMyGitsProject
[bash]
git remote add origin /home/me/allMyGitsProject/projectOne.git
[/bash]
ora possiamo effettuare il push
[bash]
git push origin master
[/bash] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2011-06-26 12:55:50</wp:post_date>
		<wp:post_date_gmt>2011-06-26 12:55:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-in-locale</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP submit form json reply</title>
		<link>http://www.itora.net/blog/2011/07/13/cakephp-submit-form-json-reply/</link>
		<pubDate>Wed, 13 Jul 2011 08:47:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[In severa ottemperanza del paradigma MVC, ogni dogmatico cakePHP developer ripudia la risposta ad una chiamata in ajax stampata direttamente nel controller. Vediamo quindi come utlizzare la view appropriata per non fare inorridire il piu' oltranzista dei cakePHP developer.
poniamo di inviare il nostro form "#MioForm" all'action "MiaAction" e voler visualizzare la risposta nel "MioDiv". Il codice javascript (utilizziamo jquery, ovvio) e' questo.
[javascript]
$.ajax({
	url: '/bookings/MiaAction',
	type: 'POST',
	data: $('#MioForm').serialize(),
	dataType: 'json',
	success: function(response) {
		$('#MioDiv').val(response.first_value);
	}
});
[/javascript] 
Il nostro controller sara' cosi'.
[php]
function MiaAction(){
	$this->view = 'Json';
	$json = array(
		'first_value' => 'Yes, i am the first value',
		'second_value' => 'No, i am the third value',
	);
	$this->set(compact('json'));
}
[/php]
Notate la view 'Json'. Questa fa si che il vostro output sia formattato correttamente. Create un file chiamato json.php, aggiungetelo in app/views e copiate al suo interno la classe JsonView  che trovate a questo indirizzo <a href="http://nuts-and-bolts-of-cakephp.com/tag/cakephp-json/">http://nuts-and-bolts-of-cakephp.com/tag/cakephp-json/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2011-07-13 08:47:44</wp:post_date>
		<wp:post_date_gmt>2011-07-13 08:47:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-submit-form-json-reply</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Netbeans e PHPUnit</title>
		<link>http://www.itora.net/blog/2011/07/18/netbeans-e-phpunit/</link>
		<pubDate>Mon, 18 Jul 2011 13:16:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[Dopo aver verificato che anche<a href="http://blog.enebo.com/2011/02/installing-ruby-support-in-netbeans-70.html"> NetBeans 7 supporta Ruby</a>, ho deciso di aggiornarlo. La prima cosa che  ho configurato e' il supporto a PHPUnit. In questo ultimo mese ho scritto tests per un applicazione in CakePHP (post a breve a rigurardo) e ho trovato parecchi link a PHPUnit, che e' il framework di testing per CakePHP 2.0.

Su Debian/Ubuntu derivate lanciate da console:
[bash]
apt-get install phpunit
[/bash]
Ora aprite Netbeans, andate in Tools-&gt;Options-&gt;PHP-&gt;Unit Testing.
Nel campo PHPUnit script inserite il valore "/usr/bin/phpunit".
Cliccate OK e chiudete.

Ora quando cliccate con il tasto destro su un file nel vostro project tree, alla voce Tools vi comparira' l'opzione "create PHPUnit tests". Scegliete la cartella nella quale volete che il vostro file di test venga generato e confermate.

Per lanciare il test, premete CTRL+F6, o cliccate con il tasto destro sul file e scelgiete la voce "Test". Maggiori info a riguardo a questo <a href="http://netbeans.org/kb/docs/php/phpunit.html">link</a>.

Qui invece il sito di PHPUnit, con tutte le assertions <a href="http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions">disponibili</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2011-07-18 13:16:36</wp:post_date>
		<wp:post_date_gmt>2011-07-18 13:16:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>netbeans-e-phpunit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="netbeans"><![CDATA[netbeans]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="phpunit"><![CDATA[phpUnit]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails Devise authentication</title>
		<link>http://www.itora.net/blog/2011/07/24/ruby-on-rails-devise-authentication/</link>
		<pubDate>Sun, 24 Jul 2011 11:17:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[Aggiungete devise nel vostro Gemfile e lanciate "bundle install".
Ora create i file di configurazione necessari:
[ruby]
rails generate devise:install
[/ruby]
Definite l'url che verra' utilizzata per i link di conferma sulle email di registrazione. In configurations/environments/development.rb
[ruby]
#Devise email
config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }
[/ruby]
Creiamo il file di migrazione e lo user model
[ruby]
rails generate devise User
[/ruby]
Nello User model appena creato Models/user.rb , possiamo scegliere quali moduli includere od escludere, semplicemente togliendo quelli di default o aggiungendo quelli presenti nel commento del file user.rb.  A mio avviso quelli di default vanno piu' che bene.
[ruby]
class User &lt; ActiveRecord::Base
# Include default devise modules. Others available are:
# :token_authenticatable, :confirmable, :lockable and :timeoutable :recoverable,
devise :database_authenticatable, :registerable,
:rememberable, :trackable, :validatable

# Setup accessible (or protected) attributes for your model
attr_accessible :email, :password, :password_confirmation, :remember_me
end
[/ruby]
Ora aprite il file Migrations/***devise_create_users.rb e commentate o aggiungete i moduli che avete aggiunto to tolto nello User Model. Poi fate la migrazione.
[ruby]
rake db:migrate
[/ruby]
Con "rake routes" potete vedere tutte le routes messe a disposizione dalla vostra applicazione. Trovo questo comendo davvero molto utile, anche nel debug di un applicazione, o quando vogliamo verificare che ogni action abbia la sua view ben fatta.Un'altra cosa che cakePHP non ha (cominciano ad essere tante).
Ora se puntate il browser alla seguente url /users/sign_in potrete loggarvi. Per registrarvi andate qui /users/sign_up. Io ho incontrato il seguente errore:
[ruby]
No route matches "/users/sign_up"
[/ruby]
Per risolverlo ho definito lo scope nel file routes, come spiegato qui <a href="http://stackoverflow.com/questions/2349604/using-devise-with-rails-3-beta">http://stackoverflow.com/questions/2349604/using-devise-with-rails-3-beta</a>
Per visualizzare i messaggi d'errore nella vostra applicazione, aggiungete queste linee di codice nel vostro application.html.erb.
[ruby]
<%- flash.each do |name, msg| -%>
  <%= content_tag :div, msg, :id => "flash_#{name}" if msg.is_a?(String) %>
<%- end -%>
[/ruby]

Sempre in application.html.erb, aggiungete i link alle azioni sign_in e sign_out. Scoprite i relativi path attraverso "rake routes" e aggiungete questo codice dopo il tag body:
[ruby]
<div id="user_nav">signed in as</div>
[/ruby]
Per circoscrivere il raggio d'azione di un utente non loggato all'interno della nostra applicazione, definiamo quali azini sono ad esso concesse. Poniamo il caso che solo un utente loggato puo' creare o modificare un post, mentre l'utente sloggato puo' solo vederli.
Nel nostro "posts_controller" aggiungiamo la seguente funzione:
[ruby]
before_filter :authenticate_user!, :except =&gt; [:index, :show]
[/ruby]
Per modificare le views di devise, lanciamo "rails g devise:views", ed otterremo un output simile a questo:
[ruby]
create app/views/devise
create app/views/devise/confirmations/new.html.erb
create app/views/devise/mailer/confirmation_instructions.html.erb
create app/views/devise/mailer/reset_password_instructions.html.erb
create app/views/devise/mailer/unlock_instructions.html.erb
create app/views/devise/passwords/edit.html.erb
create app/views/devise/passwords/new.html.erb
create app/views/devise/registrations/edit.html.erb
create app/views/devise/registrations/new.html.erb
create app/views/devise/sessions/new.html.erb
create app/views/devise/shared/_links.erb
create app/views/devise/unlocks/new.html.erb
[/ruby]
Modifichiamo i seguenti file a nostro piacimento. Se vogliamo modificare i messaggi d'errore, mettiamo mano al file config/locales/devise_en.yml. Se invece vogliamo modificare le regole di controllo per la registrazione (es passare da "Password is too short (minimum is 6 characters)" a "Password is too short (minimum is 8 characters)") modifichiamo il file initializers/devise.rb.
Per modificare le URL di default con le quali avvengono le azioni di login e logout, apriamo il file routes.rb
[ruby]
devise_for :users, :path_names =&gt; {:sign_in =&gt; "login", :sign_up =&gt; "logout"}
[/ruby].
Il nostro futuro user si logga inserendo email e password, come fare se in futuro ci venisse richiesto di sostituire il campo email con il campo username? prima di tutto aggiungiamo la colonna necessaria:
[ruby]
rails generate migration AddUsernameToUsers username:string
rake db:migrate
[/ruby]
Ora in config/initializers/devise.rb aggiungiamo
[ruby]
config.authentication_keys = [ :username ]
[/ruby]
Questo tutorial e' tratto dai seguenti railcasts:
<a href="http://railscasts.com/episodes/209-introducing-devise">http://railscasts.com/episodes/209-introducing-devise</a>
<a href="http://railscasts.com/episodes/210-customizing-devise">http://railscasts.com/episodes/210-customizing-devise</a>
Qua la <a href="https://github.com/plataformatec/devise/wiki">pagina del progetto su github</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2011-07-24 11:17:13</wp:post_date>
		<wp:post_date_gmt>2011-07-24 11:17:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-devise-authentication</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails themes generator</title>
		<link>http://www.itora.net/blog/2011/07/24/ruby-on-rails-themes-generator/</link>
		<pubDate>Sun, 24 Jul 2011 12:57:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[Questa gemma leva un sacco di castagne dal fuoco. Aggiungere stili e classi ad un'applicazione fatta prevalentemente da form e' decisamente noioso.
<a href="https://github.com/pilu/web-app-theme">web-app-theme</a> e' la gemma che fa al caso nostro.
Aggiungete al vostro Gemfile (su rails 3)
[ruby]
group :development, :test do
  gem 'web-app-theme', '>= 0.6.2'
end
[/ruby]
poi
[ruby]
bundle install
[/ruby]
e scegliete quale tema installare. <a href="http://pilu.github.com/web-app-theme/#themes/drastic-dark">Qua</a> una lista con i relativi esempi.
[ruby]
rails g web_app_theme:theme --theme="drastic-dark" --app-name="Nome della mia app"
[/ruby]
via <a href="http://blog.bryanbibat.net/2011/01/03/starting-a-professional-rails-app-with-haml-rspec-devise-and-web-app-theme/">bryanbibat</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date>2011-07-24 12:57:07</wp:post_date>
		<wp:post_date_gmt>2011-07-24 12:57:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-themes-generator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="themes"><![CDATA[themes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wordpress how to get ONE random image from the gallery</title>
		<link>http://www.itora.net/blog/2011/08/05/wordpress-how-to-get-one-random-image-from-the-gallery/</link>
		<pubDate>Fri, 05 Aug 2011 12:28:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[Tramite lo <a href="http://codex.wordpress.org/Gallery_Shortcode">shortcode gallery</a> e' possibile inserire una galleria nel nostro tema personalizzato senza alcun problema. Per poter pero' estrarre un'immagine random dalla galleria e mostrarla nella larghezza desiderata dobbiamo scrivere un metodo apposito, perche' non vi sono opzioni sufficienti nello shortcode di default (si, esistono tanti plugin che permettono di avere un'immagine random senza scrivere una linea di codice....ma che noia!)
[php]
/*
 * find a random image from the gallery, that is related to a post
 */
function get_random_image_from_gallery($custom_width) {
	$query = new WP_Query(array(
		'showposts' => 1,
		'post_type' => array('attachment'),
		'post_status' => 'inherit',
		'meta_query' => array(array(
			'key' => '_wp_attached_file',
			'value' => '',
			'compare' => '!='
		)),
		'orderby' => 'rand'
	));	
	if($query->have_posts()) : while ($query->have_posts()) : $query->the_post();
		$image_attributes = wp_get_attachment_image_src(get_the_ID(), 'large');
		$width = $image_attributes[1];			
		$height = $image_attributes[2];			
		$resize_factor = $custom_width/$image_attributes[1];
		$relative_height = $resize_factor * $image_attributes[2]; 
		?><img src="<?php echo $image_attributes[0] ?>" 
			width="<?= $custom_width?>px" 
			height="<?= ceil($relative_height)?>px"/>
		<?
	endwhile;
 	else: ?>
		<p class="empty"><?php _e(no images found.'); ?></p>
	<?php endif;		
}
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date>2011-08-05 12:28:29</wp:post_date>
		<wp:post_date_gmt>2011-08-05 12:28:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-how-to-get-one-random-image-from-the-gallery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-template"><![CDATA[wordpress template]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>php strtoupper umlauts</title>
		<link>http://www.itora.net/blog/2011/08/15/php-strtoupper-umlauts/</link>
		<pubDate>Mon, 15 Aug 2011 09:43:34 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=388</guid>
		<description></description>
		<content:encoded><![CDATA[Strtoupper non funziona con i default local characters, come le umlauts.
Per risolvere questo problema si può usare preg_replace.
[php]
setlocale(LC_ALL, 'de_DE');
$title = 'viele umlauts, zum beispiel ä, ü, ö...und eine ß';
$umaluts = array('/ä/i','/ü/i','/ö/i','/ß/i');
$replacing_umlauts = array('Ä','Ü','Ö','SS');
$title = preg_replace($umaluts, $replacing_umlauts, $title);
echo strtoupper($title);  
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date>2011-08-15 09:43:34</wp:post_date>
		<wp:post_date_gmt>2011-08-15 09:43:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-strtoupper-umlauts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="preg"><![CDATA[preg]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP 2.0 Authentication</title>
		<link>http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/</link>
		<pubDate>Tue, 20 Sep 2011 11:13:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[Con CakePHP 2.0 ci sono tante novità. In questo post spiegherò come realizzare una semplice sistema di <a href="http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html">autenticazione</a> per l'admin area, in cui abbiamo differenti users che possono accedervi, ma solo uno e' l'admin, gli altri sono amministratori con funzioni limitate. Per un piccolo sistema, con pochi utenti, ho deciso di non usare ACL, troppo ingombrante e dispendiosa, ma di scrivere un metodo apposito, allowedGroups da richiamare nelle azioni in cui voglio verificare che solo un determinato gruppo di utenti possa accedere a determinate funzioni. Alcune note sulle novità che influiscono sull'autenticazione.
<ul>
	<li>Sono supporati diversi tipi di autenticazione, configurabili tramite degli handlers, quello usato in questo articolo è il FormAuthenticate handler di default.</li>
	<li>Nelle versioni precedenti di CakePHP 2.0 bastava aggiungere l'Auth Component e chiamare la funzione login nello user controller,  nella nuova versione, nella nostra function login, dovremo chiamare manualmente "$this-&gt;Auth-&gt;login()"</li>
	<li>La password non viene più crittata di default, il metodo va chiamato manualmente</li>
</ul>
Creiamo un database per gli users e uno per i groups<br>
<pre>
CREATE TABLE IF NOT EXISTS `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(70) NOT NULL,
  `description` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `name` varchar(70) NOT NULL,
  `email` varchar(70) NOT NULL,
  `password` varchar(60) NOT NULL,
  `description` text NOT NULL,
  `created` datetime NOT NULL,
  `modified` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;
</pre><br>
Creiamo i relativi controllers, models e views usando "cake bake".
Andiamo ad eliminare tutte le action e tutte le view che non saranno accessibili al di fuori dell'admin area. Rimuoviamo quindi,per esempio, dallo UserController le action delete, add, edit. Aggiungiamo i metodi per il login ed il logout dello user in app/Controllers/UsersController.php
[php]
/**
 * Users Controller
 *
 * @property User $User
 */
class UsersController extends AppController {
	public function beforeFilter() {
		parent::beforeFilter();
		$this->Auth->allow('admin_login');
	}
/**
 * login method
 *
 * @return void
 */
	public function admin_login() {
		if ($this->request->is('post')) {
			if ($this->Auth->login()) {
				$user_id = $this->Auth->user('id');
				$group_id = $this->Auth->user('group_id');
				$group = $this->User->getGroup($group_id);
				$this->Session->write('Auth.User.group', $group);		
				$this->redirect(array('action' => 'profile', $user_id, 
										'admin' => true));
			} else {
				$this->Session->setFlash(__('email o password errata'), 
											'default', array(), 'auth');
			}
		}
	}
/**
 * logout method
 *
 * @return void
 */
	public function admin_logout() {
        $this->Session->setFlash('Sei ora sloggato dal sistema');
		$this->Session->destroy();
		$this->redirect($this->Auth->logout());
	}
[/php]
Come vedete ho utilizzato il metodo getGroup, che dovro' scrivere nel mio App/Model/User.php
[php]
function getGroup($group_id){
	$conditions = array('id' => $group_id);		
	$group = $this->Group->field('nome', $conditions);		
	if ($group) {
		return $group;
	}
	else {
		return false;
	}		
}
[/php]

Passiamo ora all'AppController.php, richiediamo l'autenticazione per chiunque voglia accedere all'admin area, e creiamo in App/Views/Layouts il file admin.ctp che conterrà il layout specifico per l'admin. Inoltre, andiamo a scrivere nella sessione il nome del gruppo, in modo da poterlo sempre leggere nella variabile $current_user, e da poterlo utilizzare sia per decidere quali elementi nelle view mostrare, sia per verificare che il nome del gruppo sia nell'elenco delle funzioni che vogliamo restringere solo ad alcuni gruppi.
[php]
class AppController extends Controller {
	var $components = array('Auth','Session');
	var $helpers = array('Session','Form','Html');
    var $current_user = false;

    function beforeFilter() {
		if (isset($this->request->params['admin'])) {
            $this->layout = 'admin';
			$this->Auth->logoutRedirect = '/';		
			$this->Auth->authenticate = array(
				AuthComponent::ALL => array(
					'fields' => array(
						'username' => 'email',
						'password' => 'password'),
					'userModel' => 'Users.User'
				), 'Form'
			);
        } else {
            $this->Auth->allow();
        }		
        $this->current_user = $this->Auth->user();
    }

    function beforeRender() {
        $this->set('current_user',$this->current_user );
    }
	
	function allowGroups($groups = array(), $options = array()){
		if (empty($options['message'])) {
			$options['message'] = 'non sei autorizzato ad accedere';
		}
		
		$group = $this->Session->read('Auth.User.group');		
		if (in_array($group, $groups) || ($groups[0] == "*")) {
			return true;
		} 
		else {
			$this->Session->setFlash(__($options['message']));
			$this->Session->destroy();
			$this->redirect($this->Auth->logout());

		}
	}	
}
[/php]
Creaimo il file Views/Users/admin_login.ctp
[php]
<?
echo $this->Session->flash('auth');
echo $this->Form->create('User', array('url' => array('controller' => 'users', 'action' =>'login')));
echo $this->Form->input('User.email', array('label'=>'Email'));
echo $this->Form->input('User.password', array('label'=>'password'));
echo $this->Form->end('Loggati');
?>
[/php]
Qui sotto un esempio su come utilizzare allowGroups.
[php]
#se voglio autorizzare tutti i gruppi esistenti
$this->allowGroups(array('*'));
#se voglio autorizzare solo il gruppo admin
$this->allowGroups(array('admin'));
#se voglio autorizzare admin e supervisori
$this->allowGroups(array('admin','supervisori'));
[/php] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2011-09-20 11:13:18</wp:post_date>
		<wp:post_date_gmt>2011-09-20 11:13:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-2-0-authentication</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp2-0"><![CDATA[cakephp2.0]]></category>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>804</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>lastexxit@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.178.183.104</wp:comment_author_IP>
			<wp:comment_date>2011-11-05 11:02:08</wp:comment_date>
			<wp:comment_date_gmt>2011-11-05 11:02:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ciao Ivan,
come prima cosa ti consiglierei di stampare a schermo la sql che ricerca le credenziali nella tabella user, controlla che l'hash della password contenuto nella sql coincida con quello nel tuo database.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320490928.6456";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:55:{s:15:"comment_post_ID";s:3:"393";s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:19:"lastexxit@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:213:"Ciao Ivan,
come prima cosa ti consiglierei di stampare a schermo la sql che ricerca le credenziali nella tabella user, controlla che l'hash della password contenuto nella sql coincida con quello nel tuo database.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:14:"85.178.183.104";s:10:"user_agent";s:100:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:8:"referrer";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:4:"blog";s:25:"http://www.itora.net/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:213:"Ciao Ivan,
come prima cosa ti consiglierei di stampare a schermo la sql che ricerca le credenziali nella tabella user, controlla che l'hash della password contenuto nella sql coincida con quello nel tuo database.";s:11:"POST_submit";s:6:"Submit";s:20:"POST_comment_post_ID";s:3:"393";s:19:"POST_comment_parent";s:1:"0";s:32:"POST__wp_unfiltered_html_comment";s:10:"749a72398e";s:26:"POST_akismet_comment_nonce";s:10:"ee00260e81";s:15:"SERVER_SOFTWARE";s:21:"Apache/2.2.3 (CentOS)";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:9:"HTTP_HOST";s:13:"www.itora.net";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:12:"HTTP_REFERER";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:14:"CONTENT_LENGTH";s:3:"354";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ORIGIN";s:20:"http://www.itora.net";s:15:"HTTP_USER_AGENT";s:100:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:73:"<address>Apache/2.2.3 (CentOS) Server at www.itora.net Port 80</address>
";s:11:"SERVER_NAME";s:13:"www.itora.net";s:11:"SERVER_ADDR";s:13:"212.239.57.67";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"85.178.183.104";s:13:"DOCUMENT_ROOT";s:34:"/var/www/vhosts/itora.net/httpdocs";s:12:"SERVER_ADMIN";s:19:"lastexxit@gmail.com";s:15:"SCRIPT_FILENAME";s:60:"/var/www/vhosts/itora.net/httpdocs/blog/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"60241";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1320490927";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>782</wp:comment_id>
			<wp:comment_author><![CDATA[ivan]]></wp:comment_author>
			<wp:comment_author_email>m.ivan6@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>151.32.61.155</wp:comment_author_IP>
			<wp:comment_date>2011-10-31 01:21:45</wp:comment_date>
			<wp:comment_date_gmt>2011-10-31 01:21:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ciao, sto diventando matto.. ho seguito passo passo quello che hai indicato, ma non funziona. Quando vado a confermare il login mi dice sempre che utente e 
password non sono validi.. Cosa mi posso essere perso?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320024105.5997";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:56:{s:15:"comment_post_ID";s:3:"393";s:14:"comment_author";s:4:"ivan";s:20:"comment_author_email";s:17:"m.ivan6@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:212:"Ciao, sto diventando matto.. ho seguito passo passo quello che hai indicato, ma non funziona. Quando vado a confermare il login mi dice sempre che utente e 
password non sono validi.. Cosa mi posso essere perso?";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"151.32.61.155";s:10:"user_agent";s:87:"Mozilla/5.0 (Windows; U; Windows NT 6.1; it; rv:1.9.2.23) Gecko/20110920 Firefox/3.6.23";s:8:"referrer";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:4:"blog";s:25:"http://www.itora.net/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:4:"ivan";s:10:"POST_email";s:17:"m.ivan6@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:212:"Ciao, sto diventando matto.. ho seguito passo passo quello che hai indicato, ma non funziona. Quando vado a confermare il login mi dice sempre che utente e 
password non sono validi.. Cosa mi posso essere perso?";s:11:"POST_submit";s:6:"Submit";s:20:"POST_comment_post_ID";s:3:"393";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"48a8335f39";s:15:"SERVER_SOFTWARE";s:21:"Apache/2.2.3 (CentOS)";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:9:"HTTP_HOST";s:13:"www.itora.net";s:15:"HTTP_USER_AGENT";s:87:"Mozilla/5.0 (Windows; U; Windows NT 6.1; it; rv:1.9.2.23) Gecko/20110920 Firefox/3.6.23";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"it-it,it;q=0.8,en-us;q=0.5,en;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:12:"gzip,deflate";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:15:"HTTP_KEEP_ALIVE";s:3:"115";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:12:"HTTP_REFERER";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:11:"HTTP_COOKIE";s:0:"";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"357";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:73:"<address>Apache/2.2.3 (CentOS) Server at www.itora.net Port 80</address>
";s:11:"SERVER_NAME";s:13:"www.itora.net";s:11:"SERVER_ADDR";s:13:"212.239.57.67";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"151.32.61.155";s:13:"DOCUMENT_ROOT";s:34:"/var/www/vhosts/itora.net/httpdocs";s:12:"SERVER_ADMIN";s:19:"lastexxit@gmail.com";s:15:"SCRIPT_FILENAME";s:60:"/var/www/vhosts/itora.net/httpdocs/blog/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"57244";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1320024104";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320490765.6807";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>674</wp:comment_id>
			<wp:comment_author><![CDATA[mlk]]></wp:comment_author>
			<wp:comment_author_email>jie@libero.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.45.239.35</wp:comment_author_IP>
			<wp:comment_date>2011-10-10 18:15:47</wp:comment_date>
			<wp:comment_date_gmt>2011-10-10 18:15:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Come devo configurare routes.php in questo caso?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318270547.3954";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:55:{s:15:"comment_post_ID";s:3:"393";s:14:"comment_author";s:3:"mlk";s:20:"comment_author_email";s:13:"jie@libero.it";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:48:"Come devo configurare routes.php in questo caso?";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:12:"79.45.239.35";s:10:"user_agent";s:102:"Mozilla/5.0 (X11; U; Linux x86_64; it; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.04 (lucid) Firefox/3.6.23";s:8:"referrer";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:4:"blog";s:25:"http://www.itora.net/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"mlk";s:10:"POST_email";s:13:"jie@libero.it";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:48:"Come devo configurare routes.php in questo caso?";s:11:"POST_submit";s:6:"Submit";s:20:"POST_comment_post_ID";s:3:"393";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"ecea596d2f";s:15:"SERVER_SOFTWARE";s:21:"Apache/2.2.3 (CentOS)";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:9:"HTTP_HOST";s:13:"www.itora.net";s:15:"HTTP_USER_AGENT";s:102:"Mozilla/5.0 (X11; U; Linux x86_64; it; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.04 (lucid) Firefox/3.6.23";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"it-it,it;q=0.8,en-us;q=0.5,en;q=0.3";s:20:"HTTP_ACCEPT_ENCODING";s:12:"gzip,deflate";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.7";s:15:"HTTP_KEEP_ALIVE";s:3:"115";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:12:"HTTP_REFERER";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"180";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:73:"<address>Apache/2.2.3 (CentOS) Server at www.itora.net Port 80</address>
";s:11:"SERVER_NAME";s:13:"www.itora.net";s:11:"SERVER_ADDR";s:13:"212.239.57.67";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:12:"79.45.239.35";s:13:"DOCUMENT_ROOT";s:34:"/var/www/vhosts/itora.net/httpdocs";s:12:"SERVER_ADMIN";s:19:"lastexxit@gmail.com";s:15:"SCRIPT_FILENAME";s:60:"/var/www/vhosts/itora.net/httpdocs/blog/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"60031";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1318270541";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318326227.2699";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>684</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email>lastexxit@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.225.30.100</wp:comment_author_IP>
			<wp:comment_date>2011-10-11 09:46:45</wp:comment_date>
			<wp:comment_date_gmt>2011-10-11 09:46:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ciao mlk,
la configurazione di routes.php resta invariata rispetto alla configurazione "standard " della sezione admin.
Quindi:
<pre>
Router::connect('/admin', array('controller' => 'users', 'action' => 'login', 'admin' => true));
</pre>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318326406.8302";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:55:{s:15:"comment_post_ID";s:3:"393";s:14:"comment_author";s:5:"admin";s:20:"comment_author_email";s:19:"lastexxit@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:242:"Ciao mlk,
la configurazione di routes.php resta invariata rispetto alla configurazione "standard " della sezione admin.
Quindi:
<pre>
Router::connect('/admin', array('controller' => 'users', 'action' => 'login', 'admin' => true));
</pre>";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:13:"92.225.30.100";s:10:"user_agent";s:100:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:8:"referrer";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:4:"blog";s:25:"http://www.itora.net/blog";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:12:"POST_comment";s:242:"Ciao mlk,
la configurazione di routes.php resta invariata rispetto alla configurazione "standard " della sezione admin.
Quindi:
<pre>
Router::connect('/admin', array('controller' => 'users', 'action' => 'login', 'admin' => true));
</pre>";s:11:"POST_submit";s:6:"Submit";s:20:"POST_comment_post_ID";s:3:"393";s:19:"POST_comment_parent";s:1:"0";s:32:"POST__wp_unfiltered_html_comment";s:10:"2b2ddabdd4";s:26:"POST_akismet_comment_nonce";s:10:"039aa1d4d0";s:15:"SERVER_SOFTWARE";s:21:"Apache/2.2.3 (CentOS)";s:11:"REQUEST_URI";s:26:"/blog/wp-comments-post.php";s:9:"HTTP_HOST";s:13:"www.itora.net";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:12:"HTTP_REFERER";s:64:"http://www.itora.net/blog/2011/09/20/cakephp-2-0-authentication/";s:14:"CONTENT_LENGTH";s:3:"469";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ORIGIN";s:20:"http://www.itora.net";s:15:"HTTP_USER_AGENT";s:100:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.220 Safari/535.1";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:30:"ISO-8859-1,utf-8;q=0.7,*;q=0.3";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:29:"/sbin:/usr/sbin:/bin:/usr/bin";s:16:"SERVER_SIGNATURE";s:73:"<address>Apache/2.2.3 (CentOS) Server at www.itora.net Port 80</address>
";s:11:"SERVER_NAME";s:13:"www.itora.net";s:11:"SERVER_ADDR";s:13:"212.239.57.67";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"92.225.30.100";s:13:"DOCUMENT_ROOT";s:34:"/var/www/vhosts/itora.net/httpdocs";s:12:"SERVER_ADMIN";s:19:"lastexxit@gmail.com";s:15:"SCRIPT_FILENAME";s:60:"/var/www/vhosts/itora.net/httpdocs/blog/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"57933";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:26:"/blog/wp-comments-post.php";s:8:"PHP_SELF";s:26:"/blog/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1318326403";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Git Branches</title>
		<link>http://www.itora.net/blog/2011/09/20/git_branch/</link>
		<pubDate>Tue, 20 Sep 2011 13:06:21 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[Per lo sviluppo di un progetto sto utilizzando git in locale con due branches. Un branch master/origin, dove risiede il lavoro pronto per essere caricato in produzione, e uno develop, su cui effettuo i commits, sviluppo nuove featurse, e, quando tutto va bene, implemento nel branch master/origin. Qui sotto un breve tutorial su come cominciare. Diamo per scontato di avere un repo inizializzato, con il branch master/origin. Per creare il nuovo branch 'develop'
[bash]
git branch develop
[/bash]
per vedere i vari branches
[bash]
git branch
[/bash]
l'asterisco indica il branch attualmente selezionato
per passare da un branch all'altro
[bash]
git checkout master
git checkout develop
[/bash]
Per portare avanti il codice su develop, selezioniamo il branch develop
[bash]
git checkout develop
[/bash]
andiamo avanti con i nostri commit che verranno eseguiti SOLO sul branch develop.
Difatti, se torniamo sul branch master e cerchiamo le modifiche appena fatte, non le troveremo perche' sono solo su develop.
quando le modifiche sono pronte per essere messe nel branch 'master', selezioniamolo
git checkout master
e diciamo al branch master di prendere le modifiche fatte su develop
[bash]
git merge develop
[/bash]
Una volta che le nuove modifiche sono state implementate, possiamo taggare il branch master con il corrente numero di versione
[bash]
git tag 0.1
[/bash]
se un giorno decidessimo che il branch develop non ci serve più, cancelliamolo 
[bash]
git branch -d develop
[/bash]

<strong>Differenze tra i due branches</strong>
Può capitare che alcune modifiche fatte su 'develop' differiscano dal codice presente su master. Puoà darsi che abbiate innavertitamente lavorato su master per delle modifiche che dovevano essere effettuate su develop, o altri scenari simili. Quando, dal branch master lanciamo
[bash]
git merge develop
[/bash]
Le modifiche fatte su master vengono fuse alle modifiche fatte su develop. Se alcune di queste modifiche riguardano la stessa porzione di codice, al primo commit git ci segnalerà che dobbiamo risolvere un conflitto prima di proseguire.
[bash]
file_config.txt: needs merge
[/bash]
Apriamo il file incriminato, sistemiamolo e poi git add e git commit.
[bash]
git add file_config.txt
git commit
[/bash]
<strong>Il control-Z dell'ultimo merge</strong>
Se avete appena fatto il merge sul branch master di una bizzarra feature che avevate sviluppato su develop, che credevate pronta e superefficiente ma in realtà ha scatenato un turbine di email di protesta da parte degli utenti che rivogliono indietro il loro vecchio sistema, dove "tutto funzionava", dove "tutto era più semplice" e sentite che sta per arrivare la email "si stava meglio quando si stava peggio", beh, allora, forse è meglio tornare indietro, e levare l'ultima feature aggiunta.
[bash]
git reset --hard ORIG_HEAD
[/bash]
Qui il <a href="http://book.git-scm.com/3_basic_branching_and_merging.html">tutorial completo</a>
Per vedere tutti i commit fatti nei minimi dettagli, installate <a href="http://lwn.net/Articles/140350/">gitk</a> e lanciatelo da console nella directory dove avete un progetto versionato]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2011-09-20 13:06:21</wp:post_date>
		<wp:post_date_gmt>2011-09-20 13:06:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git_branch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="git-branch"><![CDATA[git branch]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Contact form 1</title>
		<link>http://www.itora.net/blog/wpcf7_contact_form/contact-form-1/</link>
		<pubDate>Tue, 20 Sep 2011 21:17:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/wpcf7_contact_form/contact-form-1/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date>2011-09-20 21:17:53</wp:post_date>
		<wp:post_date_gmt>2011-09-20 21:17:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact-form-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>wpcf7_contact_form</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>form</wp:meta_key>
			<wp:meta_value><![CDATA[<p>Your Name (required)<br />
    [text* your-name] </p>

<p>Your Email (required)<br />
    [email* your-email] </p>

<p>Subject<br />
    [text your-subject] </p>

<p>Your Message<br />
    [textarea your-message] </p>

<p>[submit "Send"]</p>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_old_cf7_unit_id</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>mail</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:166:"From: [your-name] <[your-email]>
Subject: [your-subject]

Message Body:
[your-message]

--
This mail is sent via contact form on itora web http://www.itora.net";s:9:"recipient";s:19:"lastexxit@gmail.com";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>mail_2</wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:6:"active";s:0:"";s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:105:"Message body:
[your-message]

--
This mail is sent via contact form on itora web http://www.itora.net";s:9:"recipient";s:12:"[your-email]";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:13:{s:12:"mail_sent_ok";s:43:"Your message was sent successfully. Thanks.";s:12:"mail_sent_ng";s:84:"Failed to send your message. Please try later or contact administrator by other way.";s:17:"akismet_says_spam";s:84:"Failed to send your message. Please try later or contact administrator by other way.";s:16:"validation_error";s:74:"Validation errors occurred. Please confirm the fields and submit it again.";s:12:"accept_terms";s:35:"Please accept the terms to proceed.";s:13:"invalid_email";s:28:"Email address seems invalid.";s:16:"invalid_required";s:31:"Please fill the required field.";s:17:"captcha_not_match";s:31:"Your entered code is incorrect.";s:13:"upload_failed";s:22:"Failed to upload file.";s:24:"upload_file_type_invalid";s:30:"This file type is not allowed.";s:21:"upload_file_too_large";s:23:"This file is too large.";s:23:"upload_failed_php_error";s:38:"Failed to upload file. Error occurred.";s:23:"quiz_answer_not_correct";s:27:"Your answer is not correct.";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>additional_settings</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jquery screensaver</title>
		<link>http://www.itora.net/blog/2011/10/11/jquery-screensaver/</link>
		<pubDate>Tue, 11 Oct 2011 09:39:49 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[Uno screensaver stile windows, fatto con jquery.
questo l'html
[html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
<style>
body{
	background-color:#b0c4de;
	margin:0px;
	width:100%;
}
#container{
	position: relative;
}
#saver{
	background-color:lime;
	width:100px;
	height:100px;
	position: fixed;
	z-index: 50;
}
</style>
</head>
<body>
	<div id ="container">
		<div id ="saver">I'm a screensaver
		</div>
	</div>
</body>
</html>
[/html]
Dopo la fine del tag <pre>head</pre> inserite questo codice js
[javascript]
<script>
$(function(){
var savescreen = function(speed, vertical, horizontal){
	$("#saver").animate({left: '+='+horizontal, top: '+='+vertical}, speed);
	$("#saver").animate({left: '-='+horizontal, top: '+='+vertical}, speed);
	$("#saver").animate({left: '-='+horizontal, top: '-='+vertical}, speed);
	$("#saver").animate({left: '+='+horizontal, top: '-='+vertical}, speed);
};

$(function(){
	larg_saver = $('#saver').width();
	alt_saver = $('#saver').height();
	width = $(window).width();
	height = $(window).height();
	margin_top_saver = (height - alt_saver)/2;
	margin_left_saver = (width - larg_saver)/2;
	$('#saver').css('top',0);
	$('#saver').css('left',margin_left_saver);				
  });


window.setInterval(function(){
	speed = 1000
	savescreen(speed, margin_top_saver, margin_left_saver);
}, 1000);

});
</script>
[/javascript]
Qui una demo per lo <a href="/demo/screensaver.html">screensaver</a> in jquery
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date>2011-10-11 09:39:49</wp:post_date>
		<wp:post_date_gmt>2011-10-11 09:39:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-screensaver</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>creare un fork da un plugin su Github e svilupparlo come submodule</title>
		<link>http://www.itora.net/blog/2011/10/15/creare-un-fork-da-un-plugin-su-github-e-svilupparlo-come-submodule/</link>
		<pubDate>Sat, 15 Oct 2011 21:35:39 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=435</guid>
		<description></description>
		<content:encoded><![CDATA[Sto sviluppando un'applicazione in CakePhp 2.0 e voglio usare dei plugin che sono ancora fermi alla versione 1.3 di CakePhp. Per ora, rinominare qualche cartella sembra essere sufficiente. Per tenere traccia del lavoro fatto e per far si che qualcun altro possa usufruirne, ho trovato molto utile "git sumbodule". Vediamo come creare un <a href="http://help.github.com/fork-a-repo/">fork</a> da un plugin e svilupparlo in locale come un submodule.
Per prima cosa installiamo la versione 2.0 di cake e inizializzamo un repository git.
Poi andiamo su github e scegliamo il plugin da adattare alla versione 2.0 di Cake, per esempio il plugin <a href="https://github.com/CakeDC/categories">categories di CakeDc</a>. Creiamo un fork con il bottone... fork. Poi Andiamo in "Admin", selezioniamo il repository appena forkato e diciamo a github quale deve essere il "default branch", in questo caso, scegliamo il 2.0.
Importante! quando cloniamo o installiamo come submodule un repo da github, questo si porta con appresso tutti i branches. Sta a noi decidere con "git checkout nomebranch" su quale branch lavorare.
<h5>Aggiungere il submodule</h5>
Dobbiamo dire a git di aggiungere un submodule contenente il codice del nostro fork, per esempio git@github.com:user/categories.git
[bash]
git submodule add git@github.com:user/categories.git app/Plugin/Categories
[/bash]
Se vogliamo aggiungere solo un particolare branch, per esempio il 2.0, dobbiamo aggiunger il flag -b al comando precedente
[bash]
git submodule add -b 2.0 git@github.com:user/categories.git app/Plugin/Categories
[/bash]
Poi spostiamoci nella cartella del plugin appena scaricato e diciamo a git dove e' il repository remote
[bash]
cd app/Plugin/Categories
git remote add push git@github.com:user/categories.git
[/bash]
Proviamo a modificare un file del plugin, e sempre dalla cartella del plugin, eseguiamo il commit ed il push.
[bash]
git add .
git commit -m "test commit"
git push master
[/bash]
<h5>Aggiungere l'indirizzo remote originario del repo forkato</h5>
Automaticamente, la nostra "origin" e' il nostro repo forkato su github, non il repo originario(quello di CakeDC in questo esempio).
Per dire a git di scaricare gli aggiornamenti fatti dagli sviluppatori di cakedc, dobbiamo aggiungere un altro remote.
sempre nella cartella del submodule
[bash]
git remote add upstream git://github.com/CakeDC/categorie.git
[/bash]
<h5>Sincronizzare il nostro submodule con il repo originario forkato</h5>
Per scaricare gli aggiornamenti
[bash]
git fetch upstream
[/bash]
Per fare un merge fra gli aggiornamenti appena scaricati da upstream ed il vostro repo in locale
[bash]
git merge upstream/master
[/bash]
Per capire la differenza tra "git pull upstream" e "git fetch upstream", consiglio di leggere il punto "Pull in upstream changes" di questa <a href="http://help.github.com/fork-a-repo/">guida</a>.
Qui un link su<a href="http://stackoverflow.com/questions/3903817/how-to-pull-new-updates-for-forked-repository-in-github"> stackoverflow </a>riguardante questa parte.
<h5>Rimuovere submodules</h5>
Per rimuovere un submodule erronemente creato:
Delete the relevant line from the .gitmodules file.
Delete the relevant section from .git/config.
Run git rm --cached path_to_submodule (no trailing slash).
via <a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule">Stackoverflow</a>
<h5>Clonare un progetto contenente submodules</h5>
[bash]
git clone git://github.com/user/progettoconsubmodules.git
[/bash]
Questo clonera' il progetto e la cartella del submodule, ma non il contenuto di quest'ultima. Per farlo lanciamo:
[bash]
git submodule init
git submodule update
[/bash]
Altre info su questa parte nel <a href="http://progit.org/book/ch6-6.html">git pro book</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date>2011-10-15 21:35:39</wp:post_date>
		<wp:post_date_gmt>2011-10-15 21:35:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creare-un-fork-da-un-plugin-su-github-e-svilupparlo-come-submodule</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="fork"><![CDATA[fork]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="submodule"><![CDATA[submodule]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creare un admin area in rails3 usando l&#039;autenticazione scritta in devise</title>
		<link>http://www.itora.net/blog/2011/11/17/creare-un-admin-area-in-rails3-usando-lautenticazione-scritta-in-devise/</link>
		<pubDate>Thu, 17 Nov 2011 19:56:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=451</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>1)</strong>aggiungere il namespace "admin" in routes.rb, ed abbinarlo ai controller per i quali vogliamo l'autenticazione, in questo esempio "questions".
[ruby]
namespace :admin do
	match '/' => 'questions#index'
	resources :questions
end
[/ruby]
<strong>2</strong>In views/layout creare il layout admin.html.erb specificando le parti che vogliamo mostrare nella sezione admin.
<strong>3)</strong> creare il controller admin_controller.rb in controllers/admin e utilizzare "autenticate_user" (vedere il tutorial su <a href="/blog/2011/07/24/ruby-on-rails-devise-authentication/">devise</a>) per verificare che un utente sia loggato
[ruby]
class Admin::AdminController &lt; ApplicationController
	layout "admin"
	before_filter :authenticate_user!
end
[/ruby]

<strong>4)</strong> Sempre in controllers/admin, creare il file questions_controller.rb
[ruby]
class Admin::QuestionsController < Admin::AdminController
  def index
    @questions = Question.all
    respond_to do |format|
      format.html # index.html.erb
    end
  end
end
[/ruby]
<strong>5)</strong>in views/admin creaimo la cartella "questions" e inderiamo tutte le views richieste dal controller controllers/admin/questions_controller.rb, in questo caso, solo il file index.html.rb
<strong>6</strong>
Le action dei form all'interno delle views in views/admin/questions devono rimandare ai controllers in controllers/admin/question controller. Quindi, sempre tenendo "question" come esempio da:
[ruby]
<%= form_for(@answer) do |f| %>
[/ruby]
dobbiamo passare a 
[ruby]
<%= form_for(:admin, @answer) do |f| %>
[/ruby]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date>2011-11-17 19:56:38</wp:post_date>
		<wp:post_date_gmt>2011-11-17 19:56:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creare-un-admin-area-in-rails3-usando-lautenticazione-scritta-in-devise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="admin"><![CDATA[admin]]></category>
		<category domain="post_tag" nicename="authentication"><![CDATA[authentication]]></category>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aggiungere una action ad un controller in rails3</title>
		<link>http://www.itora.net/blog/2011/12/02/aggiungere-una-action-ad-un-controller-in-rails3/</link>
		<pubDate>Fri, 02 Dec 2011 16:11:59 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=468</guid>
		<description></description>
		<content:encoded><![CDATA[Rails3 cread i default <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">sette azioni</a> per ogni controller generato dinamicamente.
Se vogliamo aggiungere un azione, che ne so, per aggiornare un solo valore nel database, per una nuova view, o per quasiasi altra cosa, dobbiamo:
1)Scrivere la nostra azione nel controller, in questo esempio scrivero' un azione per disapprovare un commento, settando a "0" il valore del campo "approved".
[ruby]
def disapprove
	@comment = Comment.find(params[:id])
	if ( @comment.update_attribute(:approved, "0"))
		respond_to do |format|
			format.html { redirect_to(admin_comment_url(@comment), 
					:notice => 'Comment was unapproved.') }
			format.xml  { head:ok }
		end
	else
		respond_to do |format|
			format.html { render :action => "edit" }
			format.xml  {render:xml=>@comment.errors, :status => :unprocessable_entity }
		end	
	end		
end
[/ruby]
Nel mio file routes.rb, dovro' dire alla mia app che oltre alle 7 azioni canoniche ce ne' un altra, disapprove. E dovro' specifivare che tipo di http request e', tra post, get, put e delete. Nel mio caso ho messo post, piu' dettagli <a href="http://guides.rubyonrails.org/routing.html#adding-more-restful-actions">qui</a>
[ruby]
resources :comment do
	post 'disapprove',:on=>:member
end
[/ruby]
Lanciando "rake routes" nella cartella della mia app, posso vedere la nuova route creata, e vedere quale e' l'url da utlizzare nell'helper. Nel mio caso l'approvazione dei commenti si trova nell'admin area.
[ruby]
disapprove_admin_comment POST   /admin/comments/:id/disapprove(.:format)              {:controller=>"admin/comments", :action=>"disapprove"}
[/ruby]
Ora creaimo un link all'azione
[ruby]
<%= link_to 'Disapprove', disapprove_admin_comment_path(@comment)%>
[/ruby]
Dopo aver generato questo link, ottenevo un errore "No route matches..." la mia azione.
Errore risolto<a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to"> specificando</a> nel link il tipo di http verb
[ruby]
<%= link_to 'Disapprove', disapprove_admin_comment_path(@comment), :method=>'post' %>
[/ruby]
 
Consiglio questi screencast, per capire come vengono generate le routes, <a href="http://railscasts.com/episodes/231-routing-walkthrough">1</a> e <a href="http://railscasts.com/episodes/232-routing-walkthrough-part-2">2</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date>2011-12-02 16:11:59</wp:post_date>
		<wp:post_date_gmt>2011-12-02 16:11:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aggiungere-una-action-ad-un-controller-in-rails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="routes"><![CDATA[routes]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Contare child rows per un determinato record.</title>
		<link>http://www.itora.net/blog/2011/12/09/contare-child-rows-per-un-determinato-record/</link>
		<pubDate>Fri, 09 Dec 2011 12:03:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=480</guid>
		<description></description>
		<content:encoded><![CDATA[Supponiamo il caso di avere un post con relativi articoli, un autore con molti libri, una ditta che ha ricevuto degli ordini, o ancora, un la risposta piu' votata all'interno di un questionario.
In tutti questi casi, per ogni record principale avremo piu' record correlati. Supponiamo il caso di voler contare, nella pagina dove vengono elencate le risposte, quanti voti ogni risposta ha ricevuto, mostrando la piu' votata per prima. In Rails, possiamo scrivere un apposito metodo direttamente nel model.
[ruby]
class Answer < ActiveRecord::Base
	belongs_to :survey
	has_many :vote, :dependent => :destroy	
	
	def self.more_voted(survey_id)
		voted_answer = find(
			:all, :select => 'answers.*, count(votes.id) as vote_count',
			:conditions => ["answers.survey_id = ?", survey_id],			
			:joins => 'left outer join votes on votes.answer_id = answers.id',
			:group => 'answers.id',
			:Order => 'vote_count DESC'
		)		
	end
end
[/ruby]

Ora nella nostra action 'show' per il controller survey, dove vengono elencate tutte le risposte per il tal survey, possiamo recuperare le answer con il metodo appena creato.
[ruby]
@answers = Answer.more_voted(params[:survey_id])
[/ruby]
e mostrare nella view il valore 'vote_count'
[ruby]
<% @answers.each do |a| %>
	<tr class="even">
	<td><%= "#{a.reply}" %></td>
	<td><%= "#{a.vote_count}" %> </td>
	</tr>
<% end %>
[/ruby]
Link consigliati:
<a href="http://therailsway.com/2007/6/1/railsconf-recap-skinny-controllers">http://therailsway.com/2007/6/1/railsconf-recap-skinny-controllers</a>
<a href="http://blog.devinterface.com/2010/06/rails-best-practices-1-fat-model-skinny-controller/">http://blog.devinterface.com/2010/06/rails-best-practices-1-fat-model-skinny-controller/</a>
<a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>480</wp:post_id>
		<wp:post_date>2011-12-09 12:03:02</wp:post_date>
		<wp:post_date_gmt>2011-12-09 12:03:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contare-child-rows-per-un-determinato-record</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-practice"><![CDATA[best practice]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installare Ruby RVM, ovvero come avere differenti versioni di ruby sulla stessa macchina</title>
		<link>http://www.itora.net/blog/2012/02/26/installare-ruby-rvm-ovvero-come-avere-differenti-versioni-di-ruby-sulla-stessa-macchina/</link>
		<pubDate>Sun, 26 Feb 2012 22:34:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=491</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby Virtual Machine serve per utilizzare differenti versioni di ruby sulla stessa macchina. In Ruby, data l'alta frequenza con cui vengono rilasciate le nuove release, e' molto facile avere progetti in produzione che funzionano con una versione vecchia di ruby. un altro scenario in cui RVM puo' tornare utile e' quello in cui vogliamo sperimentare la nuova versione di ruby al posto di quella predefinita dal nostro sistema.
Se scegliamo di affidarci a RVM, cosa saggia, e' bene che d'ora in avanti ogni progetto in ruby abbia la sua versione di ruby e relativo gemset definito in .rvmrc (vedi tutorial alla fine), e di non affidarsi piu'alla versione di ruby in /usr/bin ma a quella installata nella nostra /home/user/.rvm. Dopo aver completato quanto scritto in questa guida, il comando "which ruby" restituira' il path dell'eseguibile all'interno della nostra .rvm folder. Se invece da root, eseguiamo il comando "which ruby" quesyto ritornera' il path "/usr/bin/ruby", perche' questo e' il path dell'eseguibile di sistema, mentre con rvm installiamo diverse versioni di ruby in user space, all'interno della nostra home. Si puo' installare rvm anche da root, ma e' una cosa che sconsiglio. Meglio avere una sola versione di ruby sull'intero sistema, e diverse versioni di ruby in user space, adattabili ai nostri progetti.
<h4>Installare RVM</h4>
[bash]
$ bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
[bash]
aggiungi questa linea alla fine di .bashrc
[bash]
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
[/bash]
ricarica il file ".bashrc"
[bash]
$ source ~/.bashrc
[/bash]
leggi bene cosa ti dice l'output di questo comando, e in caso installa quanto richiesto
[bash]
rvm requirements
[/bash]
Qui leggiamo
[bash]
To install rbx and/or Ruby 1.9 head (MRI) (eg. 1.9.2-head),
then you must install and use rvm 1.8.7 first
[/bash]
Ed e' quello che faremo.Per installa MRI dobbiamo prima installare ruby 1.8.7.MRI, Matz' Ruby Interpreter e' l'implementazione ufficiale di ruby scritta in C.
[bash]
apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion
[/bash]
poi
[bash]
rvm install ruby 1.8.7
[/bash]
con questo comando possiamo invece vedere tutte le versioni di ruby che possiamo installare
[bash]
rvm list known
[/bash]
Ora possiamo installare ruby 1.9.3
[bash]
rvm install ruby 1.9.3
[/bash]

<h4>Passare da una versiona all'altra di ruby, o sceglierne una di default</h4>
dando il comando
[bash]
rwm list
[/bash]
Possiamo avere un elenco delle versione di ruby installate. Per passare dalla 1.8.7 alla 1.9.3, diamo il comando
[bash]
rwm use 1.9.3
[/bash]
Se invece vogliamo usarne una di default, basta settarla
[bash]
 rvm --default use 1.9.3
[/bash]

<h4>.rvmrc</h4>
Come far si che ogni progetto abbia la sua versione di ruby e il suo gemset gia' configurato.creiamo la cartella "uno" che conterra' un progetto che usa ruby 1.8.7 e la cartella "due" che usa ruby 1.9.3.
Spostiamoci in "uno" e creiamo il file .rvmrc contenente il nome della versione di ruby che vogliamo usare ed il nome del progetto separati dal simbolo <b>@</b>.Quindi
[bash]
rvm 1.8.7@uno
[/bash]
Facciamo la stessa cosa nella cartella "due", modificando i valori per il file .rvmrc
[bash]
rvm 1.9.3@due
[/bash]
Ora ritorniamo nella cartella "uno", apparira' un warning, che ci dira' che non abbiamo il gemset installato. Digitiamo "y" ed andiamo avanti. spostandoci nelle cartelle e digitando "ruby -v" si puo' vedere come ruby cambi la versione a seconda di dove si trovi.
Per creare il gemset dove necessario(nel mio caso 1.9.3, perche' 1.8.7 era gia' installato) basta copiare il messagio letto nel warning ed eseguirlo nella directory dove abbiamo letto tale warning
[bash]
rvm gemset create 'due'
[/bash]
<h4>Aggiornare RVM</h4>
All'ultima stable
[bash]
rvm get stable
[/bash]
Alla piu' recente
[bash]
rvm get latest
[/bash]
Alla recentissima piena di bugs
[bash]
rvm get head
[/bash]
rvm ha davvero un infinita' di opzioni, dare un occhio alla pagina help (rvm -h) per rendersene conto. Il progetto e' attivamente sviluppato qua <a href="https://github.com/wayneeseguin/rvm">https://github.com/wayneeseguin/rvm</a>


<strong>Link utili:</strong>
<a href="http://beginrescueend.com/set/gem/">http://beginrescueend.com/set/gem/</a>
<a href="http://beginrescueend.com/rvm/best-practices/">http://beginrescueend.com/rvm/best-practices/</a>
<a href="http://screencasts.org/episodes/how-to-use-rvm">http://screencasts.org/episodes/how-to-use-rvm</a>
<a href=" http://rails.vandenabeele.com/blog/2011/11/26/installing-ruby-and-rails-with-rvm-on-ubuntu-11-dot-10/">http://rails.vandenabeele.com/blog/2011/11/26/installing-ruby-and-rails-with-rvm-on-ubuntu-11-dot-10/</a>
<a href="http://beginrescueend.com/">http://beginrescueend.com/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date>2012-02-26 22:34:53</wp:post_date>
		<wp:post_date_gmt>2012-02-26 22:34:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>installare-ruby-rvm-ovvero-come-avere-differenti-versioni-di-ruby-sulla-stessa-macchina</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[RVM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stesso progetto in rails, due versioni di ruby e due gemset diversi</title>
		<link>http://www.itora.net/blog/2012/03/02/stesso-progetto-in-rails-due-versioni-di-ruby-e-due-gemset-diversi/</link>
		<pubDate>Fri, 02 Mar 2012 16:16:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[Supponiamo di avere un progetto in rails che usa rails 3.0.0 e ruby 1.8.7, ma di voler sviluppare parallelamente a questo, lo stesso progetto ma con ruby 1.9.3 e rails 3.2.2, per prepararci in tempo qual'ora verra' il momento di passare in produzione. Per fare questo creeremo un <a href="/blog/2011/09/20/git_branch/">branch</a> "develop" che useremo per portare avanti la nostra applicazione sull'ultima release disponibile.
Per prima cosa, installiamo rvm come spiegato nel <a href="/blog/2012/02/26/installare-ruby-rvm-ovvero-come-avere-differenti-versioni-di-ruby-sulla-stessa-macchina/">post precedente</a> e ripassiamo come creare dei branch in git, e switchare tra l'uno e l'altro. Poi spostiamoci nella cartella del nostro progetto, nel branch master.
creiamo il file .rvmrc contenente "ruby.1.8.7@progetto". usciamo dalla cartella e rientriamo, apparira' un messaggio. "Gemset 'progetto' does not exist, rvm gemset create 'progetto' first.". Facciamo quanto dice:
[bash]
gemset create progetto
gemset use progetto
gem install bundler
[/bash]
I primi due comandi dicono a ruby che per questo progetto esiste il gemset 'progetto' per la versione 1.8.7 e che quella va usata. se da linea di comando digitiamo "rvm gemset list", verranno elencati tutti i gemset per la versione di ruby selezionata, e con un asterisco verra' contrassegnata la versione corrente.
L'ultimo comando installa bundler, onde evitare questo errore che potremmo avere al primo avvio di rails nel caso ce ne fossimo dimenticati:
[bash]
/usr/local/lib/site_ruby/1.8/rubygems/dependency.rb:247:in `to_specs': Could not find rails (>= 0) amongst [bundler-1.0.22] (Gem::LoadError)
[/bash]
Bene, passiamo al branch develop, creaiamo il branch "develop", e modifichiamo il file .rvmrc mettendo come valore ruby1.9.3@progetto. Come prima, creiamo il gemset per questa versione di ruby in questo progetto e diciamo a ruby di usare questa.
[bash]
gemset create progetto
gemset use progetto
gem install bundler
[/bash]
Dopo aver aggiornato il nostro Gemfile, aggiornando le gemme ad una versione piu' recente, lanciamo bundle.

Ricapitolando, abbiamo due branch, ognuno con una differente versione di ruby ed un diverso gemset.
master ruby 1.8.7, gemset 'progetto' per la versione 1.8.7
develop ruby 1.9.3, gemset 'progetto' per la versione 1.9.3
Per muoversi da un branch all'altro usare 'branch checkout'.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date>2012-03-02 16:16:35</wp:post_date>
		<wp:post_date_gmt>2012-03-02 16:16:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stesso-progetto-in-rails-due-versioni-di-ruby-e-due-gemset-diversi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allday"><![CDATA[allday]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[ruby on rails]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[RVM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CakePHP 2.0 Comments Spam Datasource</title>
		<link>http://www.itora.net/blog/2012/03/03/cakephp-2-0-comments-spam-datasource/</link>
		<pubDate>Sat, 03 Mar 2012 19:31:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=520</guid>
		<description></description>
		<content:encoded><![CDATA[Ho trovato questo <a href="http://www.thelittlebakery.org/2011/06/admin-panel-development-akismet-product-review/">post</a> che spiega come implementare akismet per verificare i commenti sul nostro sito.Mi e' sembrata davvero la soluzione piu' semplice fra le tante disponibili. I commenti vengono salvati nel nostro database, e dopo il salvataggio verifichiamo tramite akismet se il commento e' spam o meno. Ecco qui i passaggi:
1) Scaricarsi il datasource <a href="https://github.com/alexdd55/thelittlebakery/blob/master/app/Model/Datasource/akismet.php">akismet.php</a> ed metterlo in app/Model/Datasource.
1)Creare una api key sul sito di akisemt, ed aggiungere queste linee al file database.php
[php]
public $Akismet = array(
    'datasource' => 'Akismet',
    'blog' => 'http://yourblog/',
    'key' => 'your_akismet_key'
);
[/php] 
2)Nella nostra tabella destinanata ai commenti, aggiungere i campi spam e checked
3)Aggiungere al model Comment.php la seguente funzione.
[php]
public function checkForSpam($id) {
	$comment = $this->read(null, $id);
	App::uses('HttpSocket', 'Network/Http');
	$this->Http = new HttpSocket();
	$this->Akismet = ConnectionManager::getDataSource('Akismet');	
	$data = array(
	      'user_ip' => $comment['Comment']['ip'],
	      'user_agent' => $_SERVER['HTTP_USER_AGENT'],
	      'referrer' => 'http://www.google.com',
	      'permalink' => '/comments/view/'.$comment['Comment']['id'],
	      'comment_type' => 'comment',
	      'comment_author' => $comment['Comment']['name'],
	      'comment_author_email' => $comment['Comment']['email'],
	      'comment_author_url' => '',
	      'comment_content' => $comment['Comment']['text']
		);
	$check = $this->Akismet->checkSpam($data);
	if($check == 'true') {
		$spam = array(
			'id' => $comment['Comment']['id'],
			'checked' => 1,
			'spam' => 1
		);
	} else {
		$spam = array(
			'id' => $comment['Comment']['id'],
			'checked' => 1,
			'spam' => 0
		);
	};
	return $this->save($spam, false);
}
[/php]
4) Nel vostro CommentsController file, dopo aver salvato il commento richiamate la funzione appena creata. Es
[php]
public function add() {
	if ($this->request->is('post')) {
		$this->Comment->create();
		if ($this->Comment->save($this->request->data)) {
			$this->Comment->checkForSpam($this->Comment->getInsertID());
			$this->Session->setFlash(__('The comment has been saved'));
			$this->redirect(array('action' => 'index'));
		} else {
			$this->Session->setFlash(__('The comment could not be saved. Please, try again.'));
		}
	}
	$articles = $this->Comment->Article->find('list');
	$this->set(compact('articles'));
}
[/php]
5)Nella vostra sezione amministrativa, elencate tutti i commenti, e verificate i falsi positivi, in caso ce ne siano
6)Sul vostro sito, mostrate solo i commmenti con il valore di "spam" = 0]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>520</wp:post_id>
		<wp:post_date>2012-03-03 19:31:04</wp:post_date>
		<wp:post_date_gmt>2012-03-03 19:31:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-2-0-comments-spam-datasource</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="spam"><![CDATA[spam]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cakePHP youtube datasource</title>
		<link>http://www.itora.net/blog/2012/03/12/cakephp-youtube-datasource/</link>
		<pubDate>Mon, 12 Mar 2012 09:37:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.itora.net/blog/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[I've seen in google analytics that mosts visitors of this blog speak english. I've thought that the italians can understand what i'm writing, so, here we are, i've switched language.
I've just pushed on github a <a href="https://github.com/edap/cakePHP-youtube-datasource">cakePHP youtube datasource</a>, to retrieve information (all the metatags) regarding a video. It's still incomplete, I would like to add some others functionality, like retrieve the standard feed for a given category, or retrieve a video with more than X views. Ecc, anyway, Fork Me.
Here I provide a solution that I've adopted to save in the database the fields "video_title", "video_thumb" and "video_id" for a given youtube video link associated to a model, for example an Article model containing a video, or a Submission Model containing a youtube video for a video contest. This code validates the video URL and, if valid, add the videos metatags to the data model to save, in this example, the Article model.
1)Follow the instruction on the github page and install the datasource
2) Add this rule to your $validate array in the model where you would like to save the video information
[php]
'video' => array(
    'rule' => 'validYoutube',
    'message' => 'the given videos link is incorrect',
    'allowEmpty' => true,
),
[/php]
3)Add this functions in the Model, that checks if the video is valid, and add the metatags to the $data array
[php]
<? 
    public function validYoutube(array $data ){
        $url = current($data);
        $video_info = $this->getVideo($url);
        if ($video_info) {
            $this->setVideoValues($video_info);
            return true;
        }else{
            return false;
        }
    }

    public function getVideo($id){
	$this->Youtube = ConnectionManager::getDataSource('Youtube');	
        $video = $this->Youtube->findById($id);
        if (!$video) {
            return false;
        }
        $info = $this->Youtube->formatData($video);
        return $info;
    }

    public function setVideoValues($info){
        if (empty($info)) {
            return false;
        }
        $this->data['Article']['video'] = $info['id'];
        $this->data['Article']['video_thumb'] = $info['default_thumb'];
	$this->data['Article']['video_title'] = $info['title'];
    }
?>
[/php] 
Thanks <a href="http://debuggable.com/posts/datasources,-models,-components,-behaviors:48bd3025-2c44-40b6-a6e7-35674834cda3">debuggable for this article</a> on datasources in CakePHP]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date>2012-03-12 09:37:44</wp:post_date>
		<wp:post_date_gmt>2012-03-12 09:37:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cakephp-youtube-datasource</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="cakephp"><![CDATA[cakephp]]></category>
		<category domain="post_tag" nicename="datasource"><![CDATA[datasource]]></category>
		<category domain="post_tag" nicename="youtube"><![CDATA[youtube]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
